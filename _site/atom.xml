<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <link rel="hub" href="https://pubsubhubbub.appspot.com"/>
 <title>CSS Radar | For Frond End Developers</title>
 <link href="http://css.studiomohawk.com/atom.xml" rel="self"/>
 <link href="http://css.studiomohawk.com"/>
 <updated>2011-09-30T23:26:59+09:00</updated>
 <id>http://layouts.studiomohawk.com/</id>

 
 <entry>
   <title>github - pull requestまでの道のり</title>
   <link href="http://css.studiomohawk.com/tool/2011/09/10/give_something_back_to_open_source_via_github/"/>
   <updated>2011-09-10T20:13:00+09:00</updated>
   <id>http://css.studiomohawk.com/tool/2011/09/10/give_something_back_to_open_source_via_github</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/studiomohawk&quot;&gt;github&lt;/a&gt;を本格的に使い始めて1年くらいだろうか。&lt;br /&gt;
これまで&lt;a href=&quot;/tool/2011/03/15/html5boilerplate/&quot;&gt;HTML5 Boilerplate&lt;/a&gt;の翻訳以外でpull
requestを送った事がない。&lt;br /&gt;
今回はOctopressというプロジェクトに貢献できる機会がありそうなので、
githubでのfork、ローカル環境でのレポジトリの編集、そしてプロジェクトへのpull
requestまでの道のりを紹介しよう。&lt;br /&gt;
githubの基本的な使い方はもちろんのこと、Jekyllをより便利に、簡単に利用できるフレームワークであるOctopressについても解説していく。&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;このブログのエンジンでもある、&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;(Jekyllもオープンソース)をベースに様々な拡張を行ったフレームワークがOctopress。&lt;br /&gt;
作ったまま放置している私のJekyllのテーマ集&lt;a href=&quot;http://www.layouts-the.me/&quot;&gt;_layouts&lt;/a&gt;を、この際Octopressに乗せ変えてしまおうと思っている。  &lt;/p&gt;

&lt;h2&gt;Githubでforkする&lt;/h2&gt;

&lt;p&gt;githubのレポジトリはプライベートなものを除いてすべてForkすることが可能だ。&lt;/p&gt;

&lt;p&gt;ここでいうforkとはgithubにあるレポジトリを自分のレポジトリとしてコピーすることだと思っていて間違いはないだろう。&lt;br /&gt;
さすがはgithub。&lt;a href=&quot;http://help.github.com/fork-a-repo/&quot;&gt;Fork
A Repo&lt;/a&gt;という簡潔によくまとまったヘルプページがあるので、この手順に従っていけば誰でも簡単に自分のローカル環境にレポジトリを持つ事が可能だ。&lt;/p&gt;

&lt;p&gt;では早速、octopressをforkしてみよう。&lt;br /&gt;
&lt;a href=&quot;https://github.com/imathis/octopress&quot;&gt;imathis/octopress
- GitHub&lt;/a&gt;のページへ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tool/2011/09/10/give_something_back_to_open_source_via_github/fork-a-repo.png&quot; alt=&quot;Image&quot; class=&quot;huge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Forkボタンをクリックすると&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tool/2011/09/10/give_something_back_to_open_source_via_github/forked-a-repo.png&quot; alt=&quot;Image&quot; class=&quot;huge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自分のページにレポジトリがコピーされる。こうなった時点でこのレポジトリについては自分の思うがママ。ファイルを消そうと追加しようと自分のレポジトリとして扱われる。  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git clone git@github.com:studiomohawk/octopress.git
&lt;span class=&quot;c&quot;&gt;#studiomohawkの部分は自分のユーザ名に差し替える&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;そして上記のコマンドを叩けば、ローカル環境にレポジトリがコピーされる。&lt;br /&gt;
私もそうしているがgithubからコピー(clone)するレポジトリはいつも同じディレクトリにしておくと忘れる可能性が低い。&lt;br /&gt;
私はソースコードリーディングのためにもcloneしたりするので&lt;a href=&quot;http://db.tt/2usxiol&quot;&gt;Dropbox&lt;/a&gt;にgithubというディレクトリを作ってそこにcloneすることにしている。&lt;/p&gt;

&lt;h2&gt;Octopressのセットアップ&lt;/h2&gt;

&lt;p&gt;Octopressのセットアップはそれほど難しくない様子。
&lt;a href=&quot;http://octopress.org/docs/setup/&quot;&gt;このステップ&lt;/a&gt;に則って順にコマンドを叩いていけばいい。  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rvm rvmrc trust &lt;span class=&quot;c&quot;&gt;# rvmの設定を承認する&lt;/span&gt;
rvm reload &lt;span class=&quot;c&quot;&gt;# rmvをリロード&lt;/span&gt;
gem install bundler &lt;span class=&quot;c&quot;&gt;# bundlerをインストール&lt;/span&gt;
gem install rake &lt;span class=&quot;c&quot;&gt;# rakeをインストール&lt;/span&gt;
bundle install &lt;span class=&quot;c&quot;&gt;# bundlerを使って必要なgemをインストール&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;そして&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rake install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすると、&lt;code&gt;source&lt;/code&gt;と&lt;code&gt;sass&lt;/code&gt;ディレクトリが生成される。&lt;/p&gt;

&lt;p&gt;ここまでくればOctopressのデフォルトデザインを確認できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/tool/2011/09/10/give_something_back_to_open_source_via_github/octopress-default-full.png&quot; class=&quot;fancybox&quot;&gt;&lt;img src=&quot;/tool/2011/09/10/give_something_back_to_open_source_via_github/octopress-default.png&quot; alt=&quot;Image&quot; class=&quot;huge&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rake generate
rake preview
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Octopressのルートディレクトリで上記のコマンドを叩けばデザインを確認できる。&lt;br /&gt;
(ダミーの記事は別途用意すること)&lt;/p&gt;

&lt;h2&gt;以降のログは順次公開予定&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Octopressの設定について&lt;/li&gt;
  &lt;li&gt;Octopressのデザインテーマの変更&lt;/li&gt;
  &lt;li&gt;OctopressでAmazon S3にデプロイする(テーマの公開)&lt;/li&gt;
  &lt;li&gt;githubで元のプロジェクトにpull request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などやりながら書いているのであくまでも予定だが、大まかに言って上記をカバーする予定。&lt;br /&gt;
例によって質問はメール、あるいは&lt;a href=&quot;http://twitter.com/#!/cssradar&quot;&gt;Twitter@cssradar&lt;/a&gt;にていつでも受け付けている。&lt;/p&gt;

&lt;h3&gt;参考ページ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://help.github.com/fork-a-repo/&quot;&gt;Help.GitHub - Fork A Repo&lt;/a&gt; &lt;span class=&quot;small&quot;&gt;(2011/09/11 更新)&lt;/span&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://octopress.org/docs/setup/&quot;&gt;Octopress Setup - Octopress&lt;/a&gt; &lt;span class=&quot;small&quot;&gt;(2011/09/11 更新)&lt;/span&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://octopress.org/docs/blogging/&quot;&gt;Blogging Basics - Octopress&lt;/a&gt; &lt;span class=&quot;small&quot;&gt;(2011/09/11 更新)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>必携Mac OSXアプリ12</title>
   <link href="http://css.studiomohawk.com/tool/2011/07/30/indispensable-mac-apps/"/>
   <updated>2011-07-30T00:13:28+09:00</updated>
   <id>http://css.studiomohawk.com/tool/2011/07/30/indispensable-mac-apps</id>
   <content type="html">&lt;p&gt;Windowsでも、Ubuntuでも、Macでも。これまでどんな環境でも少しでも楽になるためなら、どんな苦労も厭わないという生き方を選んだ私は数多くのアプリを愛用してきた。&lt;br /&gt;
今の私のメイン環境はMac OSX。もちろんLionにアップグレードしたばかり。&lt;br /&gt;
すでに知っての通り、HTML + CSS
+ JSを駆使しながら、現役フロントエンドデベロッパ/ウェブデザイナとして生計を立ている。&lt;br /&gt;
そんな私がどうしても手放す事ができない12のアプリを紹介する。  &lt;/p&gt;

&lt;h2&gt;前段&lt;/h2&gt;

&lt;p&gt;記事のための記事は書かないのがCSS
Radarで大事にしている編集方針なので、衝突する点が多々ある記事だとは思うが、ウェブコンテンツは今まさにクリエイトからキュレートへ移行を始めている。そんな中、どんな12を選ぶのか、そしてそれらをどんな風に紹介するのかという点は私がこれまであまり触れてこなかったので、私にとっては勉強になるはず。
今回紹介する12のアプリはよりよいアプリが見つかればサシカエられていく。この方式は最近の2記事でチャレンジした手法を取り入れる事にした。&lt;/p&gt;

&lt;h2&gt;1. &lt;a href=&quot;http://www.chromium.org/getting-involved/dev-channel&quot;&gt;Google Chrome Dev&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Google ChromeのDevチャネル版が私のメインブラウザ兼開発環境。FireFox
+ Firebugにもお世話になることは多いが、ChromeのDevelper
Toolはかなり便利な点も多く、少しずつながら使い方も覚えてきたので、最近ではChromeを開発環境としても利用し始めた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?gl=US&amp;amp;v=nOEw9iiopwI&quot;&gt;Google Chrome Developer Tools: 12 Tricks to Develop Quicker - YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://paulirish.com/2011/a-re-introduction-to-the-chrome-developer-tools/&quot;&gt;A Re-introduction to the Chrome Developer Tools « Paul Irish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ChromeのDevelopmper Toolを使いこなすためにおすすめのビデオが上記。Paul
Irishが直接解説しているのもおすすめの理由(私は彼のジョークまじりの説明が好き)。&lt;/p&gt;

&lt;h2&gt;2. &lt;a href=&quot;https://github.com/b4winckler/macvim&quot;&gt;MacVim 7.3 Snapshot 61&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/vim/2011/07/24/vim-bits-and-pieces/&quot;&gt;Vim
- ビギナーズサバイバルガイド&lt;/a&gt;でも紹介している私のメインテキストエディタ。&lt;br /&gt;
EspressoもCodaもイマイチ合わず、HTML + CSS
+ JSがメインで制作する私にとってIDEは重すぎる。そこで挑戦し、今もなおその挑戦が続いているのがMacVim。会社の環境も長らく愛用したNotepad++からgvimに移行した。&lt;br /&gt;
前述の記事でも紹介しているが、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vim.runpaint.org/toc/&quot;&gt;Vim Recipes&lt;/a&gt;
/ 基本から応用まで非常にシンプルでミニマムなフォーマットで丁寧に解説してくれる(英語)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimcasts.org/&quot;&gt;Vimcasts - free screencasts about the text editor Vim&lt;/a&gt; / Vimのチュートリアルビデオキャスト。基本のコマンドからプラグインまで詳しく解説している(英語)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私のレベルでは大体この2サイトで紹介されていることくらいしかできないが、それでも十分な生産性の向上があった。とっつき憎いが、覚えてしまえば離れられない、そういう種類のテキストエディタ。&lt;br /&gt;
何よりも大きいのが、少なくとも数年は新着エディタの登場に心乱されずに済むところだろう。&lt;/p&gt;

&lt;h2&gt;3. &lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred Powerpack&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;アプリランチャであるAlfredは新鋭アプリと言ってもいいだろう。アプリケーションをキーワードで呼び出す(アプリの起動以外にも今は色々と機能が追加された)というシンプルなアプリ。&lt;br /&gt;
Lionの登場でLaunchPadが新たに追加されたが、圧倒的にAlfredの方が便利。AlfredのおかげでDockに入れているアプリも最小で済んでいる。&lt;br /&gt;
Mac App
Storeでは無料でインストールできるが、私は£12でPowerpackを購入した。Powerpackではファイルシステムを呼び出し、ナビゲートできたり、iTune
Mini
Playerが追加されていたり、Terminalのコマンドすら打てたりと非常に便利なのでおすすめだ。£12はバージョンが1.0になるまでの暫定の値段らしく、先日まさに0.99のベータ版がリリースされた。&lt;br /&gt;
この値段が設定された頃から比べるとかなり機能が追加されているので、今がまさに買い時のアプリだろう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://alfredtips.tumblr.com/&quot;&gt;Anna's Alfred Hat Tips&lt;/a&gt;
/ このブログでは小さなTips達をたくさん更新している。私の知らないAlfredに出会わせてくれる非常に有用なサイト&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;4. &lt;a href=&quot;http://www.smilesoftware.com/TextExpander/&quot;&gt;TextExpander&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Mac App
Storeでも購入できるようになったTextExpander。その名の通り、あらかじめ登録したスニペットを特定のキーワードをタイプして呼び出してくれる非常に便利この上ないアプリ。 &lt;/p&gt;

&lt;p&gt;メールの定型文はもちろん、CSS、HTML、JSなどのスニペット、そしてgitのコマンドなど様々な場面で利用している。&lt;br /&gt;
AppleScriptも利用できるということで、コピーしたURLから短縮URLを発行するなんてこともできる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;!dh&lt;/code&gt; で現在の日付と時間を呼び出したり&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!jq&lt;/code&gt; でGoogle CDNホストのjQueryのURL入りscriptタグを呼び出したり&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!skelton&lt;/code&gt; でよく使うHTMLのパターンを呼び出したり&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と使い方はユーザによって千差万別の超ユーティリティアプリ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://brettterpstra.com/code/?did=6&quot;&gt;TextExpander Snippets via Brett Terpstra&lt;/a&gt; / Brett Terpstraによる便利なTextExpander用スニペット集&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.smilesoftware.com/TextExpander/takecontrol.html&quot;&gt;TAKE CONTROL OF TEXTEXPANDER&lt;/a&gt; / Michael E. Cohenによる公式ハンドブック。$10、ebook。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;5. &lt;a href=&quot;http://www.realmacsoftware.com/littlesnapper/&quot;&gt;LittleSnapper&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;私のステルス365日プロジェクトで、&lt;a href=&quot;http://twitter.com/#!/cssradar&quot;&gt;Twitter@cssradar&lt;/a&gt;で展開している&lt;a href=&quot;http://flic.kr/s/aHsiYTTKK3&quot;&gt;#webdesigninspプロジェクト&lt;/a&gt;では必ず必要なスクリーンショット。&lt;br /&gt;
これがなかなか面倒なわけだが、RealMacによるLittleSnapperのおかげで成立している。&lt;br /&gt;
よりよいデザイナになるために、自分のためだけでも気に入ったデザインの収集はやるべきことの1つだと私は考えているが、LittleSnapperならただスクリーンショットを撮るだけではなく、iPhotoやApetureなど写真整理、編集アプリなみにタグづけを行ったりプロジェクトディレクトリを作ったりと散逸しがちなスクリーンショットを管理する点で他のスクリーンショットアプリを凌駕している。  &lt;/p&gt;

&lt;p&gt;もちろん、アノテーションをつけたり、トリミングしたりと基本的な編集機能も備えているし、私のようにFlickrにアップロードするのもボタン1つ。&lt;br /&gt;
Google
PicasaやFacebookなどにもアップロードできたらいいなとは思うものの、精力的に開発は続いているので、近い将来それも叶うと信じている。  &lt;/p&gt;

&lt;h2&gt;6. &lt;a href=&quot;http://www.iterm2.com/#/section/home&quot;&gt;iTerm2&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;私は黒い画面、ターミナルを使う事を恐れないデザイナ、どころか大体いつでも開いているので、iTerm2は必携アプリ。&lt;br /&gt;
タブ切り替えができたり、呼び出しにもグローバルホットキーが使えたりと通常のTerminalにはない便利な機能が満載で、非常に多くの開発者も愛用している。
あの&lt;a href=&quot;http://john.resig.usesthis.com/&quot;&gt;John Resig&lt;/a&gt;も愛用しているそうだ。  &lt;/p&gt;

&lt;p&gt;iTerm2のウェブサイトにて、他にも様々なフィーチャについて&lt;a href=&quot;http://www.iterm2.com/#/section/features/split_panes&quot;&gt;画像つきで説明しているので&lt;/a&gt;、説明こそ英語だが、一見すればその機能がわかるので、1度見てみる事をおすすめする。&lt;br /&gt;
使いやすい黒い画面を手に入れてしまうと、本当に離れられなくなるので、まだ使いこなせないな、と感じているなら是非トライしてみてほしい。&lt;/p&gt;

&lt;p&gt;アプリとして数えるのもどうかと思ったバージョンコントロールツールの&lt;a href=&quot;/git/2011/07/23/git-bits-and-pieces/&quot;&gt;git&lt;/a&gt;も、&lt;a href=&quot;/tool/2011/05/14/ruby_for_designer_frontend_dev/&quot;&gt;ウェブデザイナのためのRuby入門&lt;/a&gt;で紹介した数々のツールも、このiTerm2があるからこそ使いこなせるようになってきたと言えるだろう。&lt;/p&gt;

&lt;h2&gt;7. &lt;a href=&quot;http://brettterpstra.com/project/nvalt/&quot;&gt;nvALT 2&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;nvALT 2は&lt;a href=&quot;http://elasticthreads.tumblr.com/&quot;&gt;Elastic Threads (David Halter)&lt;/a&gt;と&lt;a href=&quot;http://brettterpstra.com/&quot;&gt;Brett Terpstra&lt;/a&gt;による、オープンソースのメモアプリ&lt;a href=&quot;http://notational.net/&quot;&gt;Notational Velocity&lt;/a&gt;のフォーク。先日久しぶりのアップデートがあり。nvAltはオリジナルのNotational Velocityの公式なエッジバージョンとなる発表があった。nvAltで追加された機能がNotational Velocityでも追加されるようになるそうだ。&lt;/p&gt;

&lt;p&gt;シンプルインターフェイスからは想像もできない機能が豊富ながら、使っている際はまったく気にならない非常に優秀なアプリ。&lt;br /&gt;
何か思いついたらさっと呼び出し、markdown形式でメモを取る。  &lt;/p&gt;

&lt;p&gt;ブログのアイデアから、Todo、スニペットの一時保管場所として利用している。iOSで愛用している&lt;a href=&quot;http://simplenoteapp.com/&quot;&gt;Simplenote&lt;/a&gt;とも同期を取る事ができるので、外出先でもメモの読み書きが可能。&lt;br /&gt;
私がオリジナルではなくnvAltを愛用している理由は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;markdown形式で書いたメモのプレビュ機能&lt;/li&gt;
  &lt;li&gt;ノート間のリンク&lt;/li&gt;
  &lt;li&gt;ノートの最大幅を決めてリーダビリティを向上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この3点が主な理由。今回のアップデートでSafari/Chromeのextensionも登場し、ブラウザからnvAltへの文字の移動が楽になった。 &lt;/p&gt;

&lt;p&gt;保存されるノートは単純な.txtファイルなので、Dropboxを使った他デバイスとの同期も簡単。&lt;/p&gt;

&lt;h2&gt;8. &lt;a href=&quot;http://db.tt/2usxiol&quot;&gt;Dropbox&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;もはやあまりにも有名で説明の必要がないファイル同期アプリのDropbox。その機能自体も魅力的だが、現時点ではデファクトアプリとなっているので、他アプリとの連携が魅力になっている。&lt;br /&gt;
私は現在50GBプランを利用して、大体60%くらい使い切っている。なんでもDropboxに放り込む癖があるからだ。 &lt;/p&gt;

&lt;p&gt;100GBプランへの移行も検討しているが、そこそこいい値段なので、残り必要なストレージはAmazon
S3を&lt;a href=&quot;http://www.expandrive.com/&quot;&gt;ExpanDrive&lt;/a&gt;から利用する実験を行っている。&lt;/p&gt;

&lt;p&gt;最近Dropboxのセキュリティについて疑問視する記事が散見されたが、もともと他人に見てほしくないファイルを他者に託すこと自体に疑問があるので、私にはあまり影響がない。  &lt;/p&gt;

&lt;h2&gt;9. &lt;a href=&quot;http://www.apple.com/aperture/&quot;&gt;Aperture&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;私の趣味はデザインとコーディング。&lt;br /&gt;
少し変わった趣味なので(仕事でもある)、数年前に始めた趣味が写真。下手の横好きのレベルを脱さないが、驚くほどデザインの勉強にもなる写真の趣味に欠かす事ができないのが、Aperture。&lt;br /&gt;
私はどうしてもAdobeのプロダクトが好きになれないので、同系アプリのLightroomではなくApertureを愛用している。&lt;/p&gt;

&lt;p&gt;Apertureはプロ用アプリでありかつ、iPhotoレベルのシンプルさをキープし続けるというすばらしいコンセプトの元、開発されている。  &lt;/p&gt;

&lt;p&gt;レタッチはもちろん、写真の整理、選定も非常にやりやすく、FlickrやFacebookへのアップロードも簡単にできるし、デファクトスタンダードなアプリなだけあって多くのサードパーティプラグインも存在する。&lt;br /&gt;
写真は撮るものではなくて作るもの、というフィロソフィーの元、私はRawで撮った写真を必ずJpegへ現像するポストプロダクションを行うので、本当になくてはならない存在。  &lt;/p&gt;

&lt;p&gt;写真を大量に撮るので容量が心配だったので、外付けのHDDで作業をしているが、この状態だとAppertureのよい点が十分に引き出せないということが最近わかったので、別のワークフローを考え中。&lt;br /&gt;
おそらく一旦スクラッチ的な場所をローカルで持って、レタッチ、現像などの処理を行い、終わったら外付けHDDへエクスポートする、というのが理想のようだ。&lt;br /&gt;
この一連の作業もそれほど面倒にならない点はすばらしい。&lt;/p&gt;

&lt;p&gt;大した写真ではないが、私がどんな写真を撮っているか気になる方は、&lt;a href=&quot;http://www.flickr.com/photos/studiomohawk/&quot;&gt;Flickr&lt;/a&gt;まで。&lt;/p&gt;

&lt;h2&gt;10. &lt;a href=&quot;https://github.com/fikovnik/ShiftIt&quot;&gt;ShiftIt&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;限りあるスクリーンの中でどのようにウィンドウを管理していくかは生産性向上には欠かせない問題。&lt;br /&gt;
様々なアプリを試してみたが、Mac上でもっとも優秀なウィンドウ管理アプリはShiftIt。  &lt;/p&gt;

&lt;p&gt;キーボードショートカットにより、モニター一杯にウィンドウを配置するフルスクリーンから、上下、左右半分、1/4など様々なサイズと位置にウィンドウを配置、リサイズしてくれる。&lt;br /&gt;
私は昔から2モニタの愛好者で、いまでもそうだが、モニタのサイズの大型化とその値段の減少により、最近では1つのモニタでウィンドウ管理するほうが生産性は向上するという見解も見かけるようになってきた。&lt;br /&gt;
確かに複数モニタは金銭的にも、またなにより、置き場所に結構困ることが多いはずなので、シングルモニタ
+ ウィンドウ管理のほうがその点でも優れていると言える。  &lt;/p&gt;

&lt;p&gt;いつも使っているというわけではないが自然にショートカットキーを叩けるようになってきたので、これがないと困るレベルまで使いこなしてきた。&lt;br /&gt;
地味なアプリながら必携と言わざる得ないだろう。  &lt;/p&gt;

&lt;p&gt;なお、ShiftItは自分でコンパイルする必要があるが、Snow
Leopard移行であればXCodeからコンパイルできるし、コンパイル用のスクリプトも用意されているので、コマンドからそのスクリプトを実行すればあとは自動で処理されるので、難しい事は何もない。
Lion環境で利用しているが、今のところ問題ない。作者もLionへ移行したそうなので、なにかあれば対応すると言っていた。&lt;/p&gt;

&lt;h2&gt;11. &lt;a href=&quot;http://balsamiq.com/&quot;&gt;Balsamiq&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/webdesign/2011/04/01/wireframe/&quot;&gt;ワイヤフレーム&lt;/a&gt;の記事でも紹介したBalsamiq。
Adobe
Airアプリで、もちろんクロスブラウザ。個人プロジェクトでも、会社の仕事でも必ず使うし、デザインのプロセスのなかで一番楽しいのがワイヤフレームな私のお気に入り。&lt;br /&gt;
$79は少し高いかなと感じることだろうが、まず間違いなく損はしない。
精力的にアップデートはかかるし、何よりもアイデアを取り出すためのツールとしてのワイヤフレームの価値を十二分に理解したチームが開発にあたっているので、とにかく使いやすい。&lt;/p&gt;

&lt;p&gt;私はBalsamiqを使ってワイヤフレームだけではなく、図解付きのドキュメントを作ったり、サイトマップを作ったり、ワークフローを書いたりもしている。&lt;br /&gt;
手書き感溢れるワイヤフレームは多くのフィードバックを得やすく、そのフィードバックを反映することもストレスなしでできるので、使っているのがとても楽しい。 &lt;/p&gt;

&lt;p&gt;ワイヤフレームをイテレートして改善していき、よりよいプロダクトの最終系が見えてくる時間こそ、デザイナとして仕事つづけるモチベーションにつながる。&lt;br /&gt;
メニューなどは英語だが、おそらくアレルギさえなければ問題なく使えるだろう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.balsamiq.com/ux/&quot;&gt;Balsamiq UX Blog&lt;/a&gt;
/ BalsamiqチームのUXDがUXを通してBalsamiqでの表現方法などを教えてくれる。Balsamiqを使ってなくても十分役に立つ情報&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;12. &lt;a href=&quot;http://sparrowmailapp.com/&quot;&gt;Sparrow&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Macのデフォルトメールアプリ、mailを1度も使った事がないが、Gmailが個人でも会社でもメールプロバイダである私に取ってはSparrowの存在があるからこそ。  &lt;/p&gt;

&lt;p&gt;非常にシンプルにデザインされ、Gmailの読み書きに関してはブラウザ版よりこちらの方が邪魔にならなくて済む。私のようにブラウザが開発環境であるフロントエンドな人間はGmailにタブを奪われ、メモリを奪われることほど生産性が低下することはない。&lt;br /&gt;
最近のアップデートにより、ラベルを表示するサイドバーや複数アカウントを一気に管理できるUnifiled
Inboxという機能も追加され、使い勝手はさらに向上した。  &lt;/p&gt;

&lt;p&gt;非常によくデザインされたアプリで、使っていて気持ちがいい。この1年以内に公開されたアプリながら多くのユーザを獲得したのも十分理解できる。&lt;br /&gt;
現在ではMac App Storeからも購入できる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sparrowtips.tumblr.com/&quot;&gt;Sparrowtips&lt;/a&gt;
/ オフィシャルTipsブログ。Sparrowの多くの機能をわかりやすく紹介しているので、購入の際の参考と勢い余って購入してしまった後の使いこなしの参考に&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Vim - ビギナーズサバイバルガイド</title>
   <link href="http://css.studiomohawk.com/vim/2011/07/24/vim-bits-and-pieces/"/>
   <updated>2011-07-24T00:57:55+09:00</updated>
   <id>http://css.studiomohawk.com/vim/2011/07/24/vim-bits-and-pieces</id>
   <content type="html">&lt;h3 id=&quot;preface&quot;&gt;Preface &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/24)&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;Vimにおける設定ファイルである.vimrc。&lt;br /&gt;
私のGoogleサーチによる他者の知の結晶とも言える.vimrcはgithubにあるので、参考になれば。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/studiomohawk/vim&quot;&gt;.vimrc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vimで覚えるべきポイントは大きく分けて3つ。
コマンド、プラグイン、そして設定。&lt;br /&gt;
この記事ではその3つにVimについての情報源を追加した4つを軸にしつつ、時系列でエントリを追記する形をとることにする。&lt;br /&gt;
なお、プラグインを追加する際、設定も同時に行う場合が多いが、その場合はプラグインのエントリに記述する。
また、同様に覚えたコマンドをより簡単に呼び出すための設定もコマンドのエントリに記述する。&lt;/p&gt;

&lt;p&gt;私のVimに対するアプローチは、Ruby on RailsとjQueryのコアメンバであるYehuda Katz氏の記事、&lt;a href=&quot;http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/&quot;&gt;Everyone Who Tried to Convince Me to use Vim was Wrong&lt;/a&gt;と同じで、始めからVimのやり方に合わせるのではなく、マウスを使ったって、Control + Sで保存したって、別にかまわないと思っている。&lt;/p&gt;

&lt;p&gt;私にとってVimはフィロソフィーではなく、あくまでもツールである。&lt;br /&gt;
便利に使えるからこそのツールで、エンドユーザはその壮大な設計思想など気にする必要はない。自分のペースで自分らしく使いこなす事が真の効率化なのだから。&lt;/p&gt;

&lt;h3 id=&quot;command&quot;&gt;コマンド&lt;/h3&gt;

&lt;h4&gt;ファイルを分割ウィンドウで開く &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/29)&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;高度なテキストエディタには必ずと言っていいほど存在するファイルを上下、あるいは左右で分割して表示する方法。&lt;br /&gt;
私はCSSファイルは同じ記述は繰り返さないように最大の努力をしているが、HTMLファイルは同じような記述で書けるように最大限の努力をしている。&lt;br /&gt;
そんな際に重宝するのがこのコマンド。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ctrl-w s&lt;/code&gt; こちらは現在のファイルを左右に分割&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ctrl-w v&lt;/code&gt; こちらは現在のファイルを上下に分割&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML
+ CSSの組み合わせは大体の場合セットで開いていた方が何かと便利。そんな際は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:sp FILENAME&lt;/code&gt; FILENAMEを新しく左右に分割されたウィンドウにロード&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:vp FILENAME&lt;/code&gt; FILENAMEを新しく上下に分割されたウィンドウにロード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近はワイドなモニターが主流なので、左右で分割しても苦にならないだろうが、私は昔の人間なので上下に開くことが多い。&lt;/p&gt;

&lt;p&gt;開く方法を紹介したからには、閉じる方法も紹介しよう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:on&lt;/code&gt; は現在選択されているウィンドウのみを残して、他のウィンドウを閉じる&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:q&lt;/code&gt; は現在選択されちえるウィンドウを閉じる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コマンドが多いなと感じる事だろうが、sはsplitの略で、vはvertical
splitの略、onはonlyの略で、qはquitなので、覚えやすいはずだ。&lt;/p&gt;

&lt;h4&gt;行をソートする &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/29)&lt;/span&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:'&amp;lt;,'&amp;gt;!sort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;選択行をアルファベット順に並べ替える。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;まず、ソートしたい行を選択&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;:&lt;/code&gt; をタイプすると、&lt;code&gt;:'&amp;lt;,'&amp;gt;'&lt;/code&gt;と表示される&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;!sort&lt;/code&gt;とタイプ = &lt;code&gt;:'&amp;lt;,'&amp;gt;!sort&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;何が便利かというと、私はCSSのプロパティをアルファベット順に並べ替える(IEハックは除外するが、ここは手作業)ので重宝している。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:'&amp;lt;,'&amp;gt;!sort -u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とすると、ユニークな行だけ、つまり重複行を削除することも可能。&lt;/p&gt;

&lt;p&gt;私の環境では日本語に置けるソートは上手く行かないが、ユニーク行を残すことはできた。&lt;/p&gt;

&lt;h4&gt;バッファにあるファイルを全部タブで開く &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/24)&lt;/span&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;:tab ball&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugin&quot;&gt;プラグイン&lt;/h3&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/godlygeek/tabular&quot;&gt;Tabular.vim&lt;/a&gt; &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/29)&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Tabular.vimは&lt;code&gt;=&lt;/code&gt;や、&lt;code&gt;:&lt;/code&gt;のような決まった文字を基点にツラを合わせるためのプラグイン。&lt;br /&gt;
読みやすいコードを目指すあまり、書いている最中でもツラを合わせないと気が済まない人には必携だ。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;word-spacing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;のようなCSSを&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:Tab\:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;とすると&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;letter-spacing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;word-spacing&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;vertical-align&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このようになる。(環境によっては、再現されない可能性がある、そんな際は&lt;a href=&quot;http://ftp.gnome.org/pub/GNOME/sources/ttf-bitstream-vera/1.10/&quot;&gt;Bitstream Vera Sans Mono&lt;/a&gt;をインストールすれば見られるようになる。日本語Fontではないが、プログラマ向Fontとして有名なので、持っていて損はしないだろう)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;tab :Tab /:\zs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.vimrcには、上記のマッピングを追記した。例とは異なるツラの揃え方だが、私はこちらのほうが好み。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/godlygeek/tabular&quot;&gt;godlygeek/tabular - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href=&quot;http://sjl.bitbucket.org/gundo.vim/&quot;&gt;Gundo&lt;/a&gt; &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/24)&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;Gundo.vimはVimの編集履歴のツリーをバージョンコントロールしたように見せてくれるプラグイン。&lt;br /&gt;
単にツリーを表示するだけではなく、そのundoの状態もプレビュできる強力なツール。  &lt;/p&gt;

&lt;p&gt;実際に動作している様を見た方が便利さがわかるので、&lt;a href=&quot;http://vimcasts.org/episodes/undo-branching-and-gundo-vim/&quot;&gt;見てみてほしい&lt;/a&gt; (via Vimcast)。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sjl.bitbucket.org/gundo.vim/&quot;&gt;Gundo - Visualize your Vim Undo Tree&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sjl/gundo.vim/&quot;&gt;sjl/gundo.vim - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; &lt;span class=&quot;small&quot;&gt;(Update: 2011/08/28)&lt;/span&gt;&lt;/h4&gt;

&lt;p&gt;vim-pathogenはVimのプラグインをGitのsubmoduleで管理することができるプラグイン。&lt;br /&gt;
Vimのプラグイン管理は非常に面倒な作業の1つ。gitの使い方を覚えなければならないところが慣れるまでは大変かもしれないが、それだけの価値はある。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プラグイン(fugitive)を追加&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git submodule add http://github.com/tpope/vim-fugitive.git bundle/fugitive  
&lt;span class=&quot;c&quot;&gt;# git submoduleでfugitiveをbundle/fugitiveに追加  &lt;/span&gt;
git submodule update --init  
&lt;span class=&quot;c&quot;&gt;# submoduleを登録して、アップデート&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;プラグインを削除&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rm -r -f 削除するプラグインのディレクトリ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;例: bundle/fugitive&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;c&quot;&gt;# .gitmodulesをエディタで開いて、削除するsubmoduleの該当行を削除する  &lt;/span&gt;
git rm -r 削除するプラグインのディレクトリ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;最後のスラッシュはいれない&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
git submodule sync
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;プラグインをアップデート&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;git submodule foreach git pull origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;なお、pathogenを利用するためには、.vimrcに&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; pathogen#runtime_append_all_bundles&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; pathogen#&lt;span class=&quot;k&quot;&gt;helptags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と追加する必要がある。この行はfiletypeの設定以前に呼び出す必要があるため、.vimrcの最初の行に追加することをおすすめする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;tpope/vim-pathogen - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vimrc&quot;&gt;設定&lt;/h3&gt;

&lt;h4&gt;タブをFirefoxのように操る &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/24)&lt;/span&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Control + Tab&lt;/code&gt;で次のタブへ&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + Shift + Tab&lt;/code&gt;で前のタブへ&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Control + t&lt;/code&gt;で新しいタブを作る&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot; keymap Firefox like tab move {&lt;/span&gt;
nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;S&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;tabprevious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :tabnext&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;S&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;tabprevious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
map &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :tabnext&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;S&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;tabprevious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;i
imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:tabnext&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;i
nmap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;tabnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
imap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;tabnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;resource&quot;&gt;リソース &lt;span class=&quot;small&quot;&gt;(Update: 2011/07/29)&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vim.runpaint.org/toc/&quot;&gt;Vim Recipes&lt;/a&gt;
/ 基本から応用まで非常にシンプルでミニマムなフォーマットで丁寧に解説してくれる (英語)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vimcasts.org/&quot;&gt;Vimcasts - free screencasts about the text editor Vim&lt;/a&gt; / Vimのチュートリアルビデオキャスト。基本のコマンドからプラグインまで詳しく解説している(英語)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://peepcode.com/products/smash-into-vim-i&quot;&gt;Smash Into Vim by PeepCode&lt;/a&gt; / Vimのチュートリアルビデオ。基本をわかりやすく解説 パート1 $12 (英語)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://peepcode.com/products/smash-into-vim-ii&quot;&gt;Smash Into Vim II by PeepCode&lt;/a&gt; / Vimのチュートリアルビデオ。基本をわかりやすく解説 パート2 $12 (英語)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Git - フロントエンドデベロッパのためのgit</title>
   <link href="http://css.studiomohawk.com/git/2011/07/23/git-bits-and-pieces/"/>
   <updated>2011-07-23T12:34:42+09:00</updated>
   <id>http://css.studiomohawk.com/git/2011/07/23/git-bits-and-pieces</id>
   <content type="html">&lt;h3 id=&quot;gitalias&quot;&gt;git alias - 2011/07/29&lt;/h3&gt;

&lt;p&gt;コマンドラインの便利さはコマンドを覚えてしまえば、色々なことがコマンド1つ、あるいは2つでできてしまう、ということにつきる。&lt;br /&gt;
gitもGUIツールの利便性は否定しないが、コマンドラインから利用することにしている私。&lt;br /&gt;
少しでもタイプする文字を減らしたいので、&lt;code&gt;git alias&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config -e --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;とすると、システムワイドで利用するgitの設定ファイル.gitconfigファイルをエディタで開ける。&lt;br /&gt;
すでに自分のメールと名前は設定済みのはずなので、ファイルに追記すれば、aliasを利用できる。&lt;/p&gt;

&lt;p&gt;6行目までは、単純によく使うコマンドを2文字に省略しただけで、&lt;br /&gt;
&lt;code&gt;lg&lt;/code&gt;は&lt;a href=&quot;http://www.jukie.net/bart/blog/pimping-out-git-log&quot;&gt;この記事&lt;/a&gt;から拝借した。&lt;code&gt;git log&lt;/code&gt;を少しセクシーにしてくれる。&lt;br /&gt;
&lt;code&gt;fix&lt;/code&gt;は私があまりにもよく繰り返す、コミットしたあとで、そのコミットに入れるべき変更に気がついたり、コミットを重ねるべきタイミングでない際に使う&lt;code&gt;--amend&lt;/code&gt;オプションをaliasにした。&lt;br /&gt;
コミット後、編集が必要だったファイルがあれば、そのファイルを編集し、&lt;code&gt;git add
FILE&lt;/code&gt;と追加して、&lt;code&gt;git
fix&lt;/code&gt;とすると、前のコミットメッセージを繰り返しタイプせずとも以前のコミットメッセージを利用してコミットできる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; status
&lt;span class=&quot;nv&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; commit
&lt;span class=&quot;nv&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; branch
&lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; checkout
&lt;span class=&quot;nv&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; diff
&lt;span class=&quot;nv&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; diff --cached
&lt;span class=&quot;nv&quot;&gt;lg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; log --graph --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;format:&lt;span class=&quot;s1&quot;&gt;&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39;&lt;/span&gt; --abbrev-commit --date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;relative
&lt;span class=&quot;nv&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; commit --amend -C HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gitdiff&quot;&gt;git diff - 2011/07/23&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;フラグなしに&lt;code&gt;git diff&lt;/code&gt;とした場合、最後のcommitと現在の状態を比較する&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git diff -- &amp;lt;filename&amp;gt;&lt;/code&gt;とすると、1ファイルのみを比較できる&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git diff --cached&lt;/code&gt;ではステージングにあるファイル群とHEAD(*)を比較する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;* HEADは現在のブランチと同義だと思っていていいそうだ。(&lt;a href=&quot;http://stackoverflow.com/questions/2304087/what-is-git-head-exactly&quot;&gt;What is git head, exactly? - Stack Overflow&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;あってはならない事だとは思うが、Commitを忘れて次の編集時に気がつくなんて事はそこそこ多く発生する。&lt;br /&gt;
バージョンコントロールを初めたばかりならなおさらだろう。
そんな時にも便利なのが&lt;code&gt;git diff&lt;/code&gt;だ。&lt;/p&gt;

&lt;p&gt;もちろん、チームでの作業の場合、マスタをCommitする際に、他の人が作業した部分をレビューするのには欠かす事ができないコマンド。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyllを使ってブログをつくろう</title>
   <link href="http://css.studiomohawk.com/tool/2011/06/11/jekyll-101.tool/"/>
   <updated>2011-06-11T13:39:28+09:00</updated>
   <id>http://css.studiomohawk.com/tool/2011/06/11/jekyll-101.tool</id>
   <content type="html">&lt;p&gt;Amazon S3にて静的ファイルによるウェブサイトを構築できるようになり、Amazon Web
Serviceが日本リージョンを追加したことで、これからJekyllのような静的ファイルジェネレータを使ったブログが日本でも増えるのではないか。  &lt;/p&gt;

&lt;p&gt;Jekyllといえば、このCSS
Radarも今年1月からwordpressを離れ、Jekyllを使ってブログを構築している。&lt;br /&gt;
(残念ながらまだAmazon S3でのホストはしていない)  &lt;/p&gt;

&lt;p&gt;Amazon Web Service勉強会でも、JekyllとAmazon S3についての発表があった。(&lt;a href=&quot;http://www.ustream.tv/recorded/14269210&quot;&gt;usteam&lt;/a&gt;)&lt;br /&gt;
そこで、今回はRubyでも、コマンドラインでも初心者である私でもつくれるようになったJekyllについて紹介しよう。&lt;/p&gt;

&lt;h2&gt;開発環境の準備&lt;/h2&gt;

&lt;p&gt;JekyllはRubyで作成されているので、当然ながらRubyが必要。&lt;br /&gt;
Rubyの導入については、&lt;a href=&quot;http://css.studiomohawk.com/tool/2011/05/14/ruby_for_designer_frontend_dev/&quot;&gt;ウェブデザイナのためのRuby入門&lt;/a&gt;を参考にしてほしい。&lt;/p&gt;

&lt;p&gt;Rubyの準備ができたら、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;*パーミッションがどうの、というエラーがでたら、&lt;code&gt;sudo gem instal
jekyll&lt;/code&gt;とすればインストールできるはず。&lt;/p&gt;

&lt;p&gt;CSS
RadarではHTMLやら、CSSなどのソースコードの表示もあるので、Pygmentsを使ってシンタックスハイライトを行っている。&lt;br /&gt;
Homebrewを使っているなら、インストールは簡単。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;brew install pip &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip install pygments
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;としてから、Homebrewでは実行ファイルにsymlinkがつかないそうで、下記を実行してsymlinkをつくる&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ln -s /usr/local/Cellar/python/2.7/bin/pygmentize /usr/local/bin/pygmentize
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2&gt;基本フォルダ/ファイル構造と記事の作成&lt;/h2&gt;

&lt;h3&gt;基本フォルダとファイルの準備&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;.  
|-- _config.yml &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;設定ファイル&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
|-- _layouts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;テンプレートフォルダ&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
|   |-- default.html  
|   -- post.html  
|-- _posts &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;記事フォルダ、.textileか.markdownで記述&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile  
|   -- 2009-04-26-barcamp-boston-4-roundup.textile  
|-- _site &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HTML生成先フォルダ&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
-- index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;アンダーバーから始まる、&lt;code&gt;_layouts&lt;/code&gt;、&lt;code&gt;_posts&lt;/code&gt;、&lt;code&gt;_site&lt;/code&gt;の3つのフォルダが必須のフォルダになる。&lt;br /&gt;
手前から、テンプレート保管、記事、生成先フォルダという役割がある。&lt;br /&gt;
&lt;code&gt;_config.yml&lt;/code&gt;はサイト全体に影響する設定ファイル。&lt;/p&gt;

&lt;p&gt;必須になるのはたったこれだけというシンプル設計もJekyllの魅力の1つ。&lt;/p&gt;

&lt;h3&gt;記事の作成&lt;/h3&gt;

&lt;p&gt;Jekyllでは、記事の作成は.markdown、または.textileという軽量マークアップ言語の文法で記述されたプレーンテキストファイルで行う。&lt;br /&gt;
&lt;code&gt;$YEAR-$MONTH-$DATE-$TITLE.$FORMAT&lt;/code&gt;という形式で、_postsフォルダに格納されたファイルをJekyllがプロセスしてくれる。  &lt;/p&gt;

&lt;p&gt;例えば、2011年5月14日に作成したウェブデザイナのためのRuby入門という記事なら、&lt;code&gt;2011-05-22-ruby-for-designer.markdown&lt;/code&gt;というファイル名になる。&lt;br /&gt;
URLに入るタイトル名はアルファベットにしておいた方が無難だろう。2バイト文字を利用できるかは試してみた事はない。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;---
layout: post
category: tool 
title: Jekyllを使ってブログをつくろう
date: 2011-06-11 13:39:28
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;記事のファイルの先頭にはYAML front matterと呼ばれる設定部分が必要になる。&lt;br /&gt;
今回の記事のYAML front matterが上記。&lt;br /&gt;
layoutでは、_layoutsに作成したテンプレート定義ファイルを設定し、&lt;br /&gt;
categoryにはカテゴリ、titleにはもちろんタイトル、そしてdateには更新日を記述することができる。&lt;br /&gt;
ここで必須になるのは、layoutとtitleの2ヶ所のみとなり、YAML front
matterで設定した項目は、記事であればその記事内のテンプレート定義ファイル内の変数として利用することが可能。&lt;/p&gt;

&lt;h2&gt;テンプレートの作成&lt;/h2&gt;

&lt;p&gt;それではテンプレートの作成について見てみよう。&lt;/p&gt;

&lt;p&gt;テンプレート定義ファイルは何の変哲もないHTMLで記述される。例外は記事ファイル内のYAML front matterに記述するlayoutの部分で利用する、テンプレート名をこちらも同じく、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;---
layout: post
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というようにYAML front
matterとして記述するという点と、後述するLiquidというテンプレートエンジンを利用して記事部分のレンダリングなどを行ったりするという点が異なる。　　&lt;/p&gt;

&lt;p&gt;wordpressでもそうだが、この手のテンプレファイル系は実際にファイル自体を見た方が早い。&lt;br /&gt;
私が公開しているJekyll用テーマファイル、&lt;a href=&quot;https://github.com/studiomohawk/jekyll-theme-the_minimum/blob/master/_layouts/post.html&quot;&gt;the_minimumの記事用レイアウトファイル&lt;/a&gt;を見ながら、
次項を読んでほしい。&lt;/p&gt;

&lt;h2&gt;Liquidについて&lt;/h2&gt;

&lt;p&gt;Liquidは非常にシンプルなテンプレートエンジンで、これまでwordpressに慣れてきた場合は少し物足りなく感じるかもしれないが、その代わり覚えるのは簡単。
Liquidで利用できるタグについては、&lt;a href=&quot;https://github.com/tobi/liquid/wiki/liquid-for-designers&quot;&gt;こちら&lt;/a&gt;を参考に、&lt;br /&gt;
また、Jekyllで利用できるLiquidの拡張タグについては、&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Liquid-Extensions&quot;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;先ほどのthe_minimumのpost.htmlを見ながらLiquidテンプレートタグで必須になるもタグと、便利なタグについて紹介しよう。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1021183.js?file=liquid.required.tag.html&quot;&gt;&lt;/script&gt;

&lt;p&gt;必須になるのは上記2つというやはりシンプル設計。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1021118.js?file=liquid.html&quot;&gt;&lt;/script&gt;

&lt;p&gt;インクルードはメンテナンスのために覚えておきたいタグで、&lt;br /&gt;
オフィシャルページにもあまり説明のないページネーションについてはもっともシンプルな例ながら、利用できるタグについてはほぼ網羅しているので、カスタマイズする際の参考になれば。&lt;/p&gt;

&lt;h2&gt;_config.ymlの設定&lt;/h2&gt;

&lt;p&gt;ここで利用できる値はほぼ無限にあるものの、まずはオフィシャルを参考にしてほしい。
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_config.ymlは非常に強力で、オフィシャルで使えるとしている設定以外にも自由に設定を拡張できる。&lt;br /&gt;
こちらについても、&lt;a href=&quot;https://github.com/studiomohawk/jekyll-theme-the_minimum/blob/master/_config.yml&quot;&gt;the_minimumのファイルを参考にしてほしい&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;_config.ymlで設定した値はテンプレートファイル内で、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;site.項目&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;のように呼び出す事ができる。例えば、the_minimumで設定したGoogle
Analytics用IDを格納する&lt;code&gt;ga&lt;/code&gt;を呼び出す場合は、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;site.ga&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;というように呼び出す事が可能。&lt;br /&gt;
コンスタントに利用する値、他には例えばサイトのURLやサイト自体のタイトルなどを設定しておくと管理が非常に楽になるはずだ。&lt;/p&gt;

&lt;h2&gt;ページの作り方&lt;/h2&gt;

&lt;p&gt;wordpressでは単一ページを作成し、aboutページなどを作成してきたという人もいることだろう。&lt;br /&gt;
Jekyllでも単一ページを作成することが可能。&lt;/p&gt;

&lt;p&gt;ページの作成方法についてもやはりシンプル設計で、トップページにあたる部分&lt;code&gt;index.html&lt;/code&gt;(トップページも単一ページ)と同じ階層にhtmlファイルを設置すればOK。&lt;br /&gt;
こちらはCSS Radarのファイルを覗いてみてほしい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/studiomohawk/CSS-Radar/blob/master/404.html&quot;&gt;404ページ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/studiomohawk/CSS-Radar/blob/master/backnumber.html&quot;&gt;バックナンバページ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;少しトリッキーながらフィードファイルも生成できる &lt;a href=&quot;https://github.com/studiomohawk/CSS-Radar/blob/master/atom.xml&quot;&gt;atom.xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;基本以外のフォルダについて&lt;/h2&gt;

&lt;p&gt;Jekyllでは&lt;code&gt;\_layouts&lt;/code&gt;、&lt;code&gt;\_posts&lt;/code&gt;、&lt;code&gt;_site&lt;/code&gt;のみが必須のフォルダと先ほど書いたが、Liquidの説明部分で書いたようにインクルードファイルを格納する、&lt;code&gt;_include&lt;/code&gt;フォルダや、Jekyllに拡張機能を追加するための、&lt;code&gt;_plugins&lt;/code&gt;フォルダを作成することができる。アンダーバーがフォルダ名の頭にある場合、Jekyllはそれらをシステムファイルとして扱い、プロセスの際にそれらフォルダも見に行くようになっている。  &lt;/p&gt;

&lt;p&gt;アンダーバーがついていないフォルダはJekyllとしては何の処理もしないが、きちんと&lt;code&gt;\_site&lt;/code&gt;フォルダへ移動してくれる。&lt;br /&gt;
なので、CSSやJavascript、そして画像などを格納するフォルダを、それぞれ、&lt;code&gt;style&lt;/code&gt;、&lt;code&gt;script&lt;/code&gt;、&lt;code&gt;image&lt;/code&gt;というようにして、ファイルを格納しておこう。&lt;/p&gt;

&lt;h2&gt;ローカル環境でプレビュー&lt;/h2&gt;

&lt;p&gt;このチュートリアル中に新たにデザインを作成し、Jekyll用にコーディングを完成するのは難しいと思うので、ここから先はすでに作成した私のthe_minimumをダウンロードしてから実践して見てほしい。&lt;/p&gt;

&lt;p&gt;Jekyllではコマンドラインを利用してファイルの生成を行う。そう、デザイナには不可解な黒い画面。&lt;br /&gt;
黒い画面とはいえ、使うコマンドは片手で数えられる程度なので、問題ないし、コピペできるように記述するので、是非試してみてほしい。&lt;/p&gt;

&lt;p&gt;それでは、&lt;a href=&quot;https://github.com/studiomohawk/jekyll-theme-the_minimum&quot;&gt;the_minimumのダウンロードは終わっただろうか&lt;/a&gt;？&lt;br /&gt;
ターミナルを開いて、the_minimumをダウンロードしたフォルダに移動してほしい。移動は&lt;code&gt;cd&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;jekyll --server --auto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;--server&lt;/code&gt;オプションはプレビュー環境用のサーバを立ち上げ、&lt;br /&gt;
&lt;code&gt;--auto&lt;/code&gt;オプションは、ローカルファイルが保存されるたびに、ファイル生成を行うオプション。&lt;/p&gt;

&lt;p&gt;このコマンドをターミナルにて実行したら、&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;をブラウザで見るとJekyllをローカル環境で動作させた結果を見る事ができる。  &lt;/p&gt;

&lt;p&gt;Jekyllは非常に強力なのに、シンプルで、インクルードなど便利な機能もついてくるので使い方を工夫すればすばらしいプロトタイプ作成ツールにもなるのではないかと思って、ベースとなるテンプレートを鋭意作成中。
話は少しそれたが、思っていた以上に簡単だったのではないだろうか？&lt;/p&gt;

&lt;h2&gt;サーバへのアップロード&lt;/h2&gt;

&lt;p&gt;サーバへのアップロードはとても簡単。&lt;br /&gt;
FTPを使って、&lt;code&gt;\_site&lt;/code&gt;内に生成されたファイル群をアップロードすればOK。  &lt;/p&gt;

&lt;p&gt;私は面倒くさがりなので、rakeを使ってrsyncでサーバとローカルファイルの同期をとっている。
&lt;code&gt;rake rsync:live&lt;/code&gt;
とするだけで、指定のローカルフォルダとサーバの同期がとれるようにしてある。&lt;/p&gt;

&lt;p&gt;美しさの保証はまったくしないが、&lt;a href=&quot;https://github.com/studiomohawk/CSS-Radar/blob/master/Rakefile&quot;&gt;Rakefileも公開してある&lt;/a&gt;ので参考になれば。&lt;/p&gt;

&lt;h2&gt;最後に&lt;/h2&gt;

&lt;p&gt;Jekyllを使ってみようと思ったきっかけは、Rubyの勉強になるだろうという単純な動機からだったが、今となってはwordpressより手軽で、ページロードのスピードも格段に早く、セキュリティの心配もまったくせずに済む、この環境が気に入っている。&lt;br /&gt;
もちろん、覚えなければならないことも多いし、バージョンが0.10という若い番号なだけに、きちんとしたドキュメントすら整備されていない。&lt;br /&gt;
万人にお勧めできるとは言いがたいが、新しいことにチャレンジすることはいい刺激になることは保証する。&lt;/p&gt;

&lt;p&gt;CSS Radarの直近の目標はAmazon S3でホストするように変更すること。&lt;br /&gt;
どなたか、東京リージョンを利用できるコマンドラインのツールをご存知でしたら、教えてください。&lt;/p&gt;

&lt;p&gt;Jekyllについて何か質問があれば、わかる範囲であればサポートしますので、いつでもどうぞ。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ウェブデザイナのためのRuby入門</title>
   <link href="http://css.studiomohawk.com/tool/2011/05/14/ruby_for_designer_frontend_dev/"/>
   <updated>2011-05-14T00:03:59+09:00</updated>
   <id>http://css.studiomohawk.com/tool/2011/05/14/ruby_for_designer_frontend_dev</id>
   <content type="html">&lt;p&gt;CSS
Radarと名がついている割には、CSSの話があまりないなと最近になって気がついたけれど、誰も気にしちゃいないだろう。&lt;br /&gt;
今回はCSSやデザインからはほど遠いように思えるRubyについて。&lt;br /&gt;
前にも書いた気がするが、私は極度の面倒くさがり。とにかく楽をするためなら、どんな苦労もいとわない。
Rubyにチャレンジしている真っ最中ながら、色々な新しい概念に触れ、色々な新しいワザを覚え、少しずつながら、面倒なことを楽にすることもでき始めてきた。
そこで、Rubyを少しだけ使い倒す方法を紹介しようと思い立った。&lt;/p&gt;

&lt;p&gt;たまにはPhotoshopを離れて(&lt;a href=&quot;http://css.studiomohawk.com/webdesign/2011/04/16/designing_in_browser/&quot;&gt;私はあまり使いませんが&lt;/a&gt;)、新しいことに挑戦してみませんか？&lt;/p&gt;

&lt;p class=&quot;small&quot;&gt;*私はRuby初心者ですので、間違っている記述や、もっと簡単にできるのに、という部分が多々あるでしょう。そんな際は是非メールをください。&lt;br /&gt;
なお、今回の記事はMac OSXでの話で、Windowsについてはまったく触れませんが、基本的な概念は同じです。&lt;/p&gt;

&lt;h2 id=&quot;rubyinstall&quot;&gt;Rubyのインストール&lt;/h2&gt;

&lt;p&gt;Mac OS
XにはRubyが標準でインストールされている。でも、最新版ではなく、まれに最新版でないと動作しないプログラムもあるので、最新版をインストールしておく必要がある。&lt;/p&gt;

&lt;p&gt;MacにおけるRubyの管理は、&lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;RVM - Ruby Version
Manager&lt;/a&gt;がおすすめ。&lt;br /&gt;
RVMを利用するためには、gitが必須になる。gitのインストールについては、&lt;a href=&quot;http://css.studiomohawk.com/tool/2011/01/29/git-version-control/&quot;&gt;こちらを参照してほしい&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RVMのインストール方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ターミナルを開いて、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;sudo bash &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl -s https://rvm.beginrescueend.com/install/rvm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;~/.bash_profile か ~/.bashrcに&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -s &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This loads RVM into a shell session.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を追加(上記ファイルがない場合は、作成して追加)&lt;br /&gt;
では、RVMが正しく動作するかを確認しよう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;rvm | head -1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とターミナルで実行してみる&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rvm is a &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と返事が返ってきたら成功。
成功したら、またターミナルにて&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.rvm/scripts/rvm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と実行しておこう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rvm install 1.9.2-head
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすれば、ruby 1.9.2-headのバージョンをインストールできる。&lt;br /&gt;
ちなみに、RVMでインストールできるバージョンは&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rvm list known
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすればリストが表示されるので、表示されたパッケージを&lt;code&gt;rvm
install&lt;/code&gt;の後に記述すればそのパッケージをインストールできる。&lt;/p&gt;

&lt;p&gt;なお、RVMではバージョンごとにgemのパッケージを管理するため、さっきまで使えたはずのgemがないとエラーが出る、なんて事態に遭遇したら、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ruby -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;として現在利用しているrubyのバージョンを確認してみよう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;rvm --default use 1.9.2 &lt;span class=&quot;c&quot;&gt;# とすると、1.9.2をデフォルトで利用しはじめ&lt;/span&gt;

rvm use system &lt;span class=&quot;c&quot;&gt;# システムにインストールされているRubyと&lt;/span&gt;
rvm default &lt;span class=&quot;c&quot;&gt;# デフォルト設定したRubyを切り替えることも可能 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;詳しくは&lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;https://rvm.beginrescueend.com/&lt;/a&gt;(英語)&lt;/p&gt;

&lt;h2&gt;Ruby Gem&lt;/h2&gt;

&lt;p&gt;RubyにはGemと呼ばれるパッケージマネージャがある。1.9系以降からはRubyの標準機能となったそうだ。&lt;br /&gt;
MacではGemも標準でインストールされていたと思うが、記憶が確かではないので確認してほしい。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;sudo gem update --system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすると、アップデートできるので試してみてほしい。&lt;/p&gt;

&lt;p&gt;パッケージマネージャってなんだ、という点については、Ubuntuを使っていた私にはすんなり理解できたが、そうでもない人が多いのでMacでいうところの、macportやfink、homebrewみたいなライブラリ集積地みたいなものだと覚えておけばいいはず。
*Homebrewについては、&lt;a href=&quot;http://css.studiomohawk.com/tool/2011/02/13/terminal-101/&quot;&gt;こちらの記事&lt;/a&gt;で紹介したので、参考にしてほしい。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;gem install PACKAGENAME
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;として、パッケージをインストールできる。&lt;br /&gt;
例えば、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;gem install rake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすると、Ruby版make(ビルドツール)であるrakeをインストールできる。  &lt;/p&gt;

&lt;h2&gt;ウェブデザイナにおすすめのパッケージ&lt;/h2&gt;

&lt;h3&gt;CSS Sprite&lt;/h3&gt;

&lt;p&gt;CSSスプライトはパフォーマンス向上のためには必須になるテクニックだが、作成するのも、管理するのも、メンテナンスするのもとても面倒。
ある特定のディレクトリに画像を入れて、自動でスプライト画像を作成し、CSSもあわせて作ってくれたら。を叶えるプログラムがRubyにある。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/merbjedi/sprite&quot;&gt;merbjedi / sprite&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;インストール&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rmagick&lt;/code&gt;gemが必要になるので、まずはこのgemをインストール。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;gem install rmagick &lt;span class=&quot;c&quot;&gt;#私はこのコマンドではエラーになったので、下記を実行してから、再度チャレンジした&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# エラーになった場合は&lt;/span&gt;
sudo brew install libxml2
sudo brew install ImageMagick
&lt;span class=&quot;c&quot;&gt;# を実行してから、上記を実行してほしい。なお、homebrewを利用している場合の例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;そしてspriteのgemをインストール&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;gem sources -a http://gemcutter.org
gem install sprite
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;使い方&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;public/
  images/
    sprites/
      black-icons/
        stop.png
        go.png
        back.png
        forward.png

      weather/
        sunny.gif
        rainy.gif
        cloudy.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というようなディレクトリ構造を例とすると、
&lt;code&gt;public&lt;/code&gt;にて&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;sprite
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というコマンドを実行すると&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;public/
  stylesheets/
    sprites.css
  images/
    sprites/
      black-icons.png
      weather.png
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というファイルを生成する。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.sprites.blue-stars-small&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&amp;#39;/images/icons/blue-stars/small.png&amp;#39;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.sprites.blue-stars-medium&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&amp;#39;/images/icons/blue-stars/medium.png&amp;#39;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.sprites.blue-stars-large&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&amp;#39;/images/icons/blue-stars/large.png&amp;#39;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.sprites.blue-stars-xlarge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&amp;#39;/images/icons/blue-stars/xlarge.png&amp;#39;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;96px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;75px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というようなスタイルを書き出してくれる。&lt;br /&gt;
sassのmixinも利用できるようで、設定も変更できる。&lt;/p&gt;

&lt;p&gt;詳しくは&lt;a href=&quot;https://github.com/merbjedi/sprite&quot;&gt;こちら&lt;/a&gt;(英語)。&lt;/p&gt;

&lt;h3&gt;SASS/LESS&lt;/h3&gt;

&lt;p&gt;LESSは今ではnode.jsプロジェクトとして生まれ変わったが、最新版ではないものの、gemからインストールはできる。
SASSについては、先日1年ぶりほどのアップデートがありアクティブにRubyプロジェクトとして成長している。&lt;/p&gt;

&lt;p&gt;ちなみに、SASSでは&lt;a href=&quot;http://www.hagenburger.net/BLOG/Lemonade-CSS-Sprites-for-Sass-Compass.html&quot;&gt;Lemonade&lt;/a&gt;というパッケージを利用してCSS Spriteの自動化を行うこともできる。&lt;/p&gt;

&lt;p&gt;LESSについての説明は、&lt;a href=&quot;http://css.studiomohawk.com/css/2011/04/03/use_less_to_clean_up_your_css/&quot;&gt;LESS: CSSをよりシンプルに、パワフルに&lt;/a&gt;を参考にしてほしい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;インストール&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;gem install less &lt;span class=&quot;c&quot;&gt;#LESS&lt;/span&gt;
gem install sass &lt;span class=&quot;c&quot;&gt;#SASS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;Juicer&lt;/h3&gt;

&lt;p&gt;リクエスト回数を減らすためには、CSS/JSの呼び出しは最小にしておく必要がある。&lt;br /&gt;
が、CSSもJSもメンテナンス性を考えれば、たくさんのファイルになってしまうのが常。&lt;br /&gt;
この矛盾を解決するためのプログラムが&lt;a href=&quot;http://cjohansen.no/en/ruby/juicer_a_css_and_javascript_packaging_tool&quot;&gt;Juicer&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Juicerは、YUI
Compressorを利用してCSS/JSを圧縮した上で、CSSであれば@importを使ってファイルを結合してくれ、JSであれば、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;/**
 * @depends prototype.js
 * @depends widgets/lightbox.js
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というコメントを使って、ファイルの結合を行うことが可能。&lt;br /&gt;
CSSはmaster.cssというファイルに@importのみを記述して、JSもmaster.jsというファイルにコメント文だけ記述している。&lt;/p&gt;

&lt;p&gt;実行すると、それぞれmaster.min.css、master.min.jsというファイルを書き出してくれる。&lt;/p&gt;

&lt;p&gt;使い方はとても簡単。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;juicer merge --force master.css &lt;span class=&quot;c&quot;&gt;# CSS --forceはmaster.min.cssが存在しても上書きを強制&lt;/span&gt;
juicer merge -i --force master.js &lt;span class=&quot;c&quot;&gt;#JS -iはエラーを無視して圧縮/結合を実行するオプション&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ついでに、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(/somepath/someimage.png?embed=true)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* ?embed=trueを追加する */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすると、画像をdata-urlに変換してくれる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;juicer merge --force master.css --embed-images data_uri
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;のように実行すればOK。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;インストール&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;gem install juicer &lt;span class=&quot;c&quot;&gt;# Juicerをインストール&lt;/span&gt;
juicer install yui_compressor &lt;span class=&quot;c&quot;&gt;# YUI compressorをインストール&lt;/span&gt;
juicer install closure_compiler &lt;span class=&quot;c&quot;&gt;# Google Closure Compilerをインストール&lt;/span&gt;
juicer install jslint &lt;span class=&quot;c&quot;&gt;# JsLintをインストール&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;CSS Redundancy Checker&lt;/h3&gt;

&lt;p&gt;何年か前にウェブツールとして同名のツールがあり、ある日使えなくなってしまった。
&lt;a href=&quot;http://code.google.com/p/css-redundancy-checker/&quot;&gt;CSS Redundancy
Checker&lt;/a&gt;は、あるHTML郡で使われていないスタイルルールをリストアップしてくれるという強力なツール。&lt;br /&gt;
フロントエンドデベロッパのタスクのほとんどはIteration、日本語にすると反復することが多く、その反復がよりよいモノを生み出すための最も大事な原動力となる。&lt;br /&gt;
しかしその副産物として、使っていないスタイルルールであふれかえって、何を消したらまずいのかもはやわからない状態になってしまう。&lt;br /&gt;
その問題を解決するのがこのツールというわけだ。&lt;/p&gt;

&lt;p&gt;使い方&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;ruby css-redundancy-checker.rb &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CSSファイル名&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;HTMLファイルディレクトリ または URLを一行ずつ記述した.txt&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とするだけ。CSSを分割して管理している場合は、Juicerで結合してから実行するといいだろう。
もちろんある特定のCSSファイルをチェックしたい場合は、個別に指定すればOK。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;インストール&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;sudo gem install hpricot &lt;span class=&quot;c&quot;&gt;# hpricotをインストール、必須&lt;/span&gt;
svn checkout http://css-redundancy-checker.googlecode.com/svn/trunk/ css-redundancy-checker
&lt;span class=&quot;c&quot;&gt;# svnをインストールしていない場合は、sudo brew install svnとしてから&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;css-redundancy-checker.rbという名前の通り、このスクリプトは単純な1ファイル。&lt;br /&gt;
なので、実行する際はインストールしたディレクトリに移動してから実行する必要がある。&lt;/p&gt;

&lt;h3&gt;Rake&lt;/h3&gt;

&lt;p&gt;Rakeはそれ自体ではなにもしないが、非常に強力なツール。&lt;br /&gt;
ビルドツールとして誕生したRakeのはずだが、私はビルドツールがなんのことかも完璧には理解できない。&lt;br /&gt;
要するに、A)の次はB)を実行し、C)を実行するのは、A)を実行する必要がある。&lt;br /&gt;
というなプロセスをrubyを使って行うことができる。いわばエディタなどにあるマクロみたいな存在。&lt;/p&gt;

&lt;p&gt;ここまで紹介してきたツール群はもちろんのこと、Rakeを使って  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://optipng.sourceforge.net/&quot;&gt;OptiPNG&lt;/a&gt;を使ってPNG画像の最適化&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sylvana.net/jpegcrop/jpegtran/&quot;&gt;JPEGtran&lt;/a&gt;を使ってJPEG画像の最適化
(Macへのインストール方法は、&lt;a href=&quot;http://www.phpied.com/installing-jpegtran-mac-unix-linux/&quot;&gt;こちらを参照&lt;/a&gt;(英語))&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sprite&lt;/code&gt;を使ってスプライト画像/CSSを作成&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;juicer&lt;/code&gt;を使って、CSS/JSの圧縮/結合&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/htmlcompressor/&quot;&gt;htmlcompressor&lt;/a&gt;を使ってHTMLの最適化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このプロセスをrake taskとして作成すれば、&lt;code&gt;rake
タスク名&lt;/code&gt;とするだけで一気に終了できる。  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;rsync&lt;/code&gt;や&lt;code&gt;ftp&lt;/code&gt;なども合わせるとファイルアップロードまで自動化できる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rakeのチュートリアル&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jasonseifer.com/2010/04/06/rake-tutorial&quot;&gt;Rake Tutorial by Jason Seifer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/articles/rake.html&quot;&gt;Using the Rake Build Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pastie.org/242691&quot;&gt;Rake Quick Reference by Greg Houston&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などが参考になるだろう。もちろん全部英語の文書なので、CSS
Radarの癖にRakeの詳しい説明を知りたい方は、&lt;a href=&quot;http://twitter.com/#!/cssradar&quot;&gt;Twitter@cssradar&lt;/a&gt;にてリクエストしてほしい。&lt;br /&gt;
私も覚えたてなので、全部の質問には答えることができるかわからないが。&lt;/p&gt;

&lt;h2&gt;ウェブデザイナ/フロントエンドデベロッパのRuby&lt;/h2&gt;

&lt;p&gt;ウェブデザイナ/フロントエンドデベロッパのタスクは多岐に渡る。&lt;br /&gt;
Adobe
Suitesを使いこなし、HTML/CSS/JSを駆使し、ユーザビリティ/アクセシビリティに考慮し、行動心理学を応用しつつ、ウェブサイトをユーザに届ける。&lt;br /&gt;
その上、プログラマの領分であるはずのRubyにまで手を出す。&lt;br /&gt;
それもすべて時間を生み出すための技術。&lt;br /&gt;
その時間がよりよいサイトを生み出すための原動力だから。&lt;br /&gt;
新しいことへの出会いはいつだってインスピレーションへ続く近道だと信じているので、是非チャレンジしてほしい。&lt;br /&gt;
もし今回紹介しなかった便利なスクリプトなどご存知でしたら、是非教えてください。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ブラウザでデザインをするということ</title>
   <link href="http://css.studiomohawk.com/webdesign/2011/04/16/designing_in_browser/"/>
   <updated>2011-04-16T10:53:05+09:00</updated>
   <id>http://css.studiomohawk.com/webdesign/2011/04/16/designing_in_browser</id>
   <content type="html">&lt;p&gt;長い間、Adobe
Photoshopはウェブデザインのデファクトアプリとして君臨してきた。もちろん、今も私のMac
MiniにCS4がインストールされている。&lt;/p&gt;

&lt;p&gt;しかし、個人プロジェクトはもちろん、すでに会社のプロジェクトでも私はPhotoshopを卒業しつつある。&lt;br /&gt;
Firefox
+ Firebugとお気に入りのエディタ(Vim)。そしてCSS3があれば、Photoshopを使わなくてもデザインができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1907828001/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=studiomohawk-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1907828001&quot;&gt;Hardboiled Web Design&lt;/a&gt;の作者であるAndy Clarkeは&lt;a href=&quot;http://stuffandnonsense.co.uk/blog/about/i_dont_care_about_responsive_web_design/&quot;&gt;I don’t care about Responsive Web Design&lt;/a&gt;にて、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Today, anything that’s fixed and unresponsive isn’t web design, it’s something else. If you don’t embrace the inherent fluidity of the web, you’re not a web designer, you’re something else.
Web design &lt;strong&gt;is&lt;/strong&gt; responsive design, Responsive Web Design &lt;strong&gt;is&lt;/strong&gt; web design, done right.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とすら書いているが、&lt;a href=&quot;http://css.studiomohawk.com/css/2011/01/24/about-responsive-web-design/&quot;&gt;レスポンシブウェブデザイン&lt;/a&gt;はPhotoshopで作ることはとても難しい。レスポンシブデザインこそが、紙的な発想から離れることができなかったウェブデザインの新しい時代の旗手。&lt;/p&gt;

&lt;p&gt;ブラウザでデザインをするということ。&lt;br /&gt;
その際の実際のプロセスと便利なツール、そして注意点について紹介しよう。&lt;/p&gt;

&lt;h2&gt;インブラウザ デザインのプロセス&lt;/h2&gt;

&lt;h3&gt;アイデアの集約と大まかなレイアウトの決定&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://css.studiomohawk.com/webdesign/2011/04/01/wireframe/&quot;&gt;ワイヤフレーム&lt;/a&gt;は、ブラウザでデザインを行う際には確実に必要なプロセス。&lt;br /&gt;
Photoshopでのデザインであれば、ワイヤフレームの有効性はPhotoshopの習熟度によっては低くなることもあるかもしれないが、今回はそうはいかない。&lt;br /&gt;
ワイヤフレームだって、スタティックな画像じゃないか、と思うかも知れないし、それは事実だ。  &lt;/p&gt;

&lt;p&gt;それでも、以前書いたように、ワイヤフレームはアイデアを形にする最初のステップであり、要素がどこにどんな風に配置されるのかを集約し、レイアウトするのにはぴったりのツールだ。&lt;/p&gt;

&lt;h4&gt;このステップで利用するツール&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://balsamiq.com/&quot;&gt;Balsamiq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;ベースになるHTMLとCSSの作成&lt;/h3&gt;

&lt;p&gt;このステップは基礎になるHTMLを作っていく。CSSリセットや、ベースのCSS、そしてヘッダやフッタ、ボディになる部分を作成する。&lt;/p&gt;

&lt;p&gt;自分でよく使うテンプレートを持っておくことで大幅に時間を短縮できる部分だ。&lt;br /&gt;
私は&lt;a href=&quot;http://css.studiomohawk.com/tool/2011/03/15/html5boilerplate/&quot;&gt;HTML5 Boilerplate&lt;/a&gt;に、グリッドや&lt;a href=&quot;https://github.com/stubbornella/oocss&quot;&gt;OOCSS&lt;/a&gt;のモジュールを組み込むカスタマイズを施し、よく利用するCSSのスタイルを&lt;a href=&quot;http://css.studiomohawk.com/css/2011/04/03/use_less_to_clean_up_your_css/&quot;&gt;LESS&lt;/a&gt;のミックスインとして用意している。&lt;/p&gt;

&lt;h4&gt;このステップで利用するツール&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;HTML5 Boilerplate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stubbornella/oocss&quot;&gt;OOCSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;レイアウト&lt;/h3&gt;

&lt;p&gt;まずはグリッドを決めてしまう。&lt;br /&gt;
Photoshopでのステップだと、グリッドを使ったり、ガイドを使ったりするのがこのステップ。
この時点でグリッドがレスポンシブデザインに対応しているとあとで楽に作業ができる。&lt;br /&gt;
もちろん、慣れないうちは大変だし、リデザインの場合はそうもいかないこともあるだろう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://griddle.it/&quot;&gt;Griddle.it&lt;/a&gt;を使って簡単にCSSでガイドを作成する方法を紹介しよう。&lt;/p&gt;

&lt;p&gt;Griddle.itは&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;http://griddle.it/[全体幅]-[コラム数]-[ガターサイズ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;という指定で、グリッド画像を生成してくれる。
例えば、こちらを開いてみてほしい。&lt;a href=&quot;http://griddle.it/960-12-30&quot;&gt;幅960px 12コラム 30pxのガター&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自動で画像を生成してくれるので、グリッドパターンが確定したら、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(http://griddle.it/960-12-30)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;repeat-y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;背景画像に読み込んでしまえばOK。&lt;/p&gt;

&lt;p&gt;レスポンシブデザインに対応したいという方は、私のおすすめフレームワーク&lt;a href=&quot;http://lessframework.com/&quot;&gt;Less
Framework&lt;/a&gt;を利用して、ベース(グリッドの部分だけ利用するのがおすすめ)のCSSを作成し、Less Frameworkに対応した実際にグリッドがウィンドウのサイズに合わせて変更されるこの&lt;a href=&quot;http://arnaumarch.com/en/less-grid.html&quot;&gt;JavaScript&lt;/a&gt;を組み込むと楽にできる。&lt;/p&gt;

&lt;p&gt;すでに自分のレスポンシブデザインのベースがあるという場合は、Griddle.itを利用して、media
queriesで呼び出す画像を切り替えればOK。&lt;/p&gt;

&lt;p&gt;また、HTML5 Boilerplateをベースに選択していて、Less
Frameworkなどを組み込むのが面倒な場合は、Andy Clerkeの&lt;a href=&quot;http://stuffandnonsense.co.uk/projects/320andup/&quot;&gt;320 and up&lt;/a&gt;を利用するといいだろう。(モバイルファーストという概念で作られているので、若干注意が必要)&lt;/p&gt;

&lt;p&gt;さらに、レスポンシブウェブデザインでは現在のウィンドウの幅がどのサイズにあたるのかわかりづらいとちょっと面倒なので、
&lt;a href=&quot;http://www.josscrowcroft.com/2011/code/window-size-bookmarklet/&quot;&gt;Window Size bookmarklet to test/debug CSS3 Media Queries&lt;/a&gt;のブックマークレットを利用すれば、ウィンドウサイズを知らせてくれるので、非常に便利。&lt;/p&gt;

&lt;p&gt;ちなみに、この後のステップでは、CSSやHTMLを保存し、ブラウザをリフレッシュして変更を確認し〜を繰り返す。
より時短を目指すため、&lt;a href=&quot;http://livejs.com/&quot;&gt;Live.js&lt;/a&gt;を活用することをおすすめする。&lt;br /&gt;
このJavaScriptは、ファイルの保存を検知して、ブラウザのリロードを行わず、変更を反映するという夢のようなツール。&lt;br /&gt;
ブラウザでデザインしていなくて、コーディングしている時にかなり役に立つ強力なJavaScript。&lt;/p&gt;

&lt;h4&gt;このステップで利用するツール&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://griddle.it/&quot;&gt;Griddle.it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.josscrowcroft.com/2011/code/window-size-bookmarklet/&quot;&gt;Window Size bookmarklet to test/debug CSS3 Media Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://livejs.com/&quot;&gt;Live.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lessframework.com/&quot;&gt;Less Framework&lt;/a&gt; + &lt;a href=&quot;http://arnaumarch.com/en/less-grid.html&quot;&gt;Less Grid&lt;/a&gt; (Less Framework利用時)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stuffandnonsense.co.uk/projects/320andup/&quot;&gt;320 and up&lt;/a&gt; (HTML5
Boilerplate利用時)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;残りのステップは、デザインしていくだけ。&lt;/h3&gt;

&lt;p&gt;コンテンツなしにデザインすることができないのは、Photoshopであろうと、ブラウザでのデザインでも同じ。
だが、画像素材や原稿がまだの場合は、想定している画像のサイズや原稿の分量などを伝えるというステップもあってもいいかも知れない。
(実際に私の職場では非常によくある)&lt;/p&gt;

&lt;p&gt;フレキシビリティこそが、ブラウザでデザインすることのもっとも優れた点なので、活用していこう。&lt;/p&gt;

&lt;p&gt;ダミー画像の生成なら、&lt;a href=&quot;http://lorempixum.com/&quot;&gt;lorempixum&lt;/a&gt;が数あるダミー生成ツールのなかでももっとも優れている。&lt;br /&gt;
グレーを始めとする単色だけでなく、サイズの指定はもちろん、色の指定、画像のジャンルの指定すらできる優れものだ。&lt;/p&gt;

&lt;p&gt;プロトタイプとして、素材の提供者にブラウザで確認してもらうには十分こと足りるだろう。&lt;br /&gt;
日本語では、海外のようなLorem Ipsumテキストがないので、どうしてもダミー原稿が欲しい場合は、私は&lt;a href=&quot;http://webtools.dounokouno.com/dummytext/index.html&quot;&gt;ダミーテキストジェネレータ&lt;/a&gt;を利用している。&lt;/p&gt;

&lt;h2&gt;インブラウザ デザインの注意点&lt;/h2&gt;

&lt;p&gt;CSS3はIE6-8では使えないプロパティもある。&lt;strong&gt;全てをブラウザでデザインすることは不可能だ&lt;/strong&gt;。&lt;br /&gt;
テキスチャやCSS3では表現しづらいデザインももちろんある。&lt;br /&gt;
&lt;strong&gt;Photoshopを絶対に使ってはならない&lt;/strong&gt;ということではない。&lt;br /&gt;
ブラウザでデザインすることはPhotoshopでページすべてのデザインを行うよりもフレキシブルだということ、そして、現時点でそれを行うことが以前に比べれば格段に簡単になったことが大切な部分だと思ってほしい。&lt;/p&gt;

&lt;p&gt;Photoshopでページすべてのデザインをしていると、カラースキームを変更するのは大変。&lt;br /&gt;
Photoshopでページすべてのデザインをしていると、フォントを変更するのは大変。&lt;br /&gt;
Photoshopでページすべてのデザインをしていると、要素の配置1つを動かしても大変。&lt;br /&gt;
レイヤーの管理は崩壊し、ちょっとした変更の依頼もストレスになる。&lt;br /&gt;
もちろん、先に書いたレスポンシブウェブデザインの実現も相当な時間がかかる。&lt;/p&gt;

&lt;p&gt;インブラウザ デザインではこういった部分でPhotoshopより優れている。&lt;br /&gt;
Photoshopがインブラウザ デザインより優れている部分ももちろんある。&lt;br /&gt;
(私にとっては十分だが)&lt;a href=&quot;http://www.pixelmator.com/&quot;&gt;Pixelmator&lt;/a&gt;も、レイヤースタイルに対応した&lt;a href=&quot;http://flyingmeat.com/acorn/&quot;&gt;Acorn&lt;/a&gt;もPhotoshopがデファクトになってきた強力な機能やユーザビリティにはまだ少し距離がある。&lt;br /&gt;
ここで最も大切なことは、Photoshopでのデザインプロセスにも疑問を投げかける時代が来たということ。&lt;/p&gt;

&lt;p&gt;よりプロダクティブになることが、ウェブデザイナのタスクの1つで、そうすることで、より優れた問題解決を提案できる、作ることそのものより、どうやって問題を解決するべきか、を考える時間を作り出していくことが大切なこと。&lt;/p&gt;

&lt;p&gt;ブラウザでデザインすること。&lt;br /&gt;
このプロセス、ツールセットにバージョンをつけるとしたら、1.0RCといったところだろう。&lt;br /&gt;
CS5.5になるほど、イテレーションを繰り返しすばらしいプロダクトを提供してきたAdobe
Photoshopと比べればまだまだ始まったばかり。&lt;br /&gt;
このプロセス/ツールセットのバージョンアップを行うのは、ウェブデザイナたちの役割だ。&lt;/p&gt;

&lt;h2&gt;ブラウザでのデザインについてもっと詳しく&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://37signals.com/svn/posts/1061-why-we-skip-photoshop&quot;&gt;Why we skip Photoshop (37signals)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hicksdesign.co.uk/journal/graphics-editor-or-text-editor&quot;&gt;Graphics Editor or Text Editor? (The Hickensian)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.stuffandnonsense.co.uk/blog/about/walls_come_tumbling_down_presentation_slides_and_transcript/&quot;&gt;Walls Come Tumbling Down presentation slides and transcript (Stuff and Nonsense)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://24ways.org/2009/make-your-mockup-in-markup&quot;&gt;Make Your Mockup in Markup (24 ways)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://christeso.com/why-i-never-design-a-site-in-photoshop&quot;&gt;Why I never design a site in Photoshop (Bullies Get High On Beatings)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.quora.com/Joel-Lewenstein/Life-Without-Photoshop&quot;&gt;Life Without Photoshop by Joel Lewenstein (Quora)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.inspiredm.com/learn-to-use-your-browser-in-web-design/&quot;&gt;Learn to Use Your Browser in Web Design (Inspired Magazine)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>ページの高速化とその方法について</title>
   <link href="http://css.studiomohawk.com/frontend/2011/04/09/why_speed_matters/"/>
   <updated>2011-04-09T11:46:40+09:00</updated>
   <id>http://css.studiomohawk.com/frontend/2011/04/09/why_speed_matters</id>
   <content type="html">&lt;p&gt;ハードウェアの値段が下がり、ネットの接続環境も高速化していく。ブラウザも高速化を競い合っている。&lt;br /&gt;
それでもなお、GoogleもYahoo!、FacebookもTwitterもページのロード時間を短縮するテクニックを生み出している。&lt;/p&gt;

&lt;p&gt;なぜだろうか？&lt;/p&gt;

&lt;p&gt;もちろん、カスタマの満足度を上げ、終局的には売り上げに貢献するからだ。&lt;/p&gt;

&lt;p&gt;GoogleもYahoo!も世界で1位2位を争うほどすばらしいデータセンタを所有しているのだから、早くて当たり前。
なんて思っていないだろうか？
ページのロード時間の80%はフロントエンドで最適化できる。バックエンドが重要ではないとは言わないが、我々フロントエンドデベロッパのもっとも大切なタスクの1つがページの最適化。&lt;/p&gt;

&lt;h2&gt;ページのロード時間で失うモノ&lt;/h2&gt;

&lt;p&gt;サイト最適化ファームのStrangeloopがMashable!に寄稿した記事、&lt;a href=&quot;http://mashable.com/2011/04/06/site-speed/&quot;&gt;Why Websites Are Slow &amp;amp; Why Speed Really Matters [INFOGRAPHIC]&lt;/a&gt;
によると、  &lt;/p&gt;

&lt;p&gt;1秒のロード時間の増加で、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;7%のコンバージョン&lt;/li&gt;
  &lt;li&gt;11%のPV&lt;/li&gt;
  &lt;li&gt;16%のカスタマ満足度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を失うとある。  &lt;/p&gt;

&lt;p&gt;さらに、3秒待たされると57%のカスタマはサイトから離脱し、そのうち80%のユーザはそのサイトへ戻ってこず、そのうち50%がネガティブな経験を他の人にも共有する。&lt;br /&gt;
もっと加えると、平均的にユーザは実際のロード時間より15%ほど追加でロードにかかっていると感じ、人にその話をする場合、実際のロード時間より35%遅いと伝えている。&lt;/p&gt;

&lt;p&gt;3クリックルールにはもう意味がないかも知れないが、3秒ルールは実際に存在する。  &lt;/p&gt;

&lt;h2&gt;Steve Soudersの教え&lt;/h2&gt;

&lt;p&gt;元Yahoo!のパフォーマンス担当責任者であり、現在はGoogleで働くSteve Soudersの&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873113616/&quot;&gt;ハイパフォーマンスWebサイト&lt;/a&gt;はこのトピックの中で確実に読んでおくべき本。
彼が作り出した14のルールはYahoo!のYSlowのチェック項目にもなっているので見たことがあるはずだ。&lt;br /&gt;
GoogleのPageSpeedでも近しいチェック項目を持っているので、それぞれの項目が何を意味して、それがどうしてページロード時間の最適化につながるかについて覚えておくことをおすすめする。&lt;/p&gt;

&lt;h2&gt;最適化チェックツール&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/yslow/&quot;&gt;Yahoo! YSlow for Firebug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://code.google.com/speed/page-speed/&quot;&gt;Page Speed&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;先ほどもその名前が出てきたが、この2つは絶対に必要なブラウザ拡張。Firefox+Firebugでも利用できるが、今では両方ともChromeでも動作する。Page
Speedは&lt;a href=&quot;http://pagespeed.googlelabs.com/&quot;&gt;オンラインバージョン&lt;/a&gt;も公開され、モバイルでもチェックができる。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://gtmetrix.com/&quot;&gt;GTmetrix&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;こちらはYSlowとPage
Speedを同時にチェックするオンラインツール。ブックマークレットも配布されている。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://loads.in/&quot;&gt;loads.in&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;せっかく最適化しても、結果をコンスタントなテスト環境でチェックできなければ意味がない。&lt;br /&gt;
Loads.inでは珍しく日本のサーバからのロード時間をテストしてくれる。ついでにブラウザ別の結果も見ることができるので、おすすめのオンラインツール。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;最適化ツール&lt;/h2&gt;

&lt;h3&gt;CSSスプライト&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;オンラインツール: &lt;a href=&quot;http://spritegen.website-performance.org/&quot;&gt;CSS Sprite Generator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby(ターミナルから利用): &lt;a href=&quot;https://github.com/merbjedi/sprite&quot;&gt;merbjedi/sprite - GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SASS連携: &lt;a href=&quot;http://www.hagenburger.net/BLOG/Lemonade-CSS-Sprites-for-Sass-Compass.html&quot;&gt;Generate CSS Sprites on the Fly with Lemonade&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Adobe Air: &lt;a href=&quot;http://collamo.jp/tonttu&quot;&gt;Tonttu for Adobe® AIR™&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;JavaScriptとCSSの結合と縮小化&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby(ターミナルから利用): &lt;a href=&quot;http://cjohansen.no/en/ruby/juicer_a_css_and_javascript_packaging_tool&quot;&gt;Juicer - a CSS and JavaScript packaging tool / Ruby - cjohansen.no&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;オンラインツール (CSSとJS): &lt;a href=&quot;http://www.refresh-sf.com/yui/&quot;&gt;Online YUI Compressor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;オンラインツール (CSS): &lt;a href=&quot;http://www.cleancss.com/&quot;&gt;Clean CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;オンラインツール (JS): &lt;a href=&quot;http://closure-compiler.appspot.com/home&quot;&gt;Closure Compiler Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;画像最適化&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Mac OS X GUI: &lt;a href=&quot;http://imageoptim.pornel.net/&quot;&gt;ImageOptim – a PNG/JPEG/GIF optimizer for Mac OS X&lt;/a&gt;
　
### バラバラのツールは必要ない？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんなにたくさん上げられても使いこなすまで時間がかかりそうだと思ったら、 
&lt;a href=&quot;http://css.studiomohawk.com/tool/2011/03/15/html5boilerplate/&quot;&gt;以前紹介した&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;HTML5
Boilerplate&lt;/a&gt;のビルドスクリプトを利用することをおすすめする。&lt;br /&gt;
CSSスプライト以外はHTML5 Boilerplateのビルドスクリプトでも行える。&lt;/p&gt;

&lt;h2&gt;.htaccess(サーバ側で設定できるなら、その方がベター)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/paulirish/html5-boilerplate/blob/master/.htaccess&quot;&gt;.htaccess on HTML5 Boilerplate&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;HTML5
Boilerplateの.htaccessを利用するだけでYSlowのスコアが15ポイントはあがるのではないかと思うほどすばらしいファイル。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;スピードについて&lt;/h2&gt;

&lt;p&gt;つい先日FireFox4がリリースされたが、Chromeのスピードには及ばない。SafariもOperaも起動速度に関してはかなり気を使っているし、ページのレンダリングに関しても同様。&lt;br /&gt;
毎日確実に利用するものだからこそ、スピードが大事。ということだろう。  &lt;/p&gt;

&lt;p&gt;ウェブサイトも同様にスピードが大事。&lt;br /&gt;
Googleのページランクに関わるからでも、上に書いた実質的なロスでもかまわない、どうにかしてページロード速度の最適化が大切であるかをステークホルダと共有し、実践してほしい。&lt;br /&gt;
もちろん個人サイトでどんな風にやっていくべきかを実験するのもいいだろう。  &lt;/p&gt;

&lt;p&gt;私自身かなり気を使って最適化をしている。
このサイトは海外のサーバなので日本では少しレスポンスが遅く、他の個人サイトと同様Amazon
S3に移行する予定だ。  &lt;/p&gt;

&lt;p&gt;すると、.htaccessが使えないので、Rakeを使って自動化を行うよう調整中。
Amazonのクラウドサービスを使ってみるというのもいい経験になったし、Rakeによるビルド/デプロイの自動化もツールとして昇華しやすいので会社でも役に立つと思っている。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LESS: CSSをよりシンプルに、パワフルに</title>
   <link href="http://css.studiomohawk.com/css/2011/04/03/use_less_to_clean_up_your_css/"/>
   <updated>2011-04-03T12:51:36+09:00</updated>
   <id>http://css.studiomohawk.com/css/2011/04/03/use_less_to_clean_up_your_css</id>
   <content type="html">&lt;p&gt;If it ain’t broken, don’t fix it.&lt;/p&gt;

&lt;p&gt;壊れてないなら、直す必要はない。&lt;br /&gt;
CSSは追加してほしい仕様はあるけど、壊れている、とまでは感じない。プログラミングの何たるかをまったく理解していなかった私にも簡単に覚えられた。  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt;や&lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;のようなCSSの拡張が完全に悪だとは思わないが、絶対に必要だとも感じない。&lt;br /&gt;
でも、知っておくともっとシンプルに、もっとパワフルに、もっと素早くCSSを書くことができる、プラスアルファの便利ツールであることは間違いない。  &lt;/p&gt;

&lt;p&gt;実際このブログでも、ほかの幾つかの個人プロジェクトでは私はLESSを使い始めている。&lt;br /&gt;
SASSもLESSもほぼ同じ概念で、ほぼ同じ文法で書かれているが、LESSはJSを使ってダイナミックにCSSへ変換してくれたりもでき、すこしだけ開発時に楽をできるので私はLESSを選んだ。&lt;br /&gt;
もちろん、今話題の&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;でも利用できるという点もはやり好きモノの私にはぴったりだ。&lt;br /&gt;
ちなみに、SASSでも&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;sass --watch style.scss:style.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とコマンドラインから実行すれば、SASSファイルを保存するたびにCSSへ変換してくれるそうだから、自分の好みに合わせて利用してほしい。  &lt;/p&gt;

&lt;h2&gt;LESSでできること&lt;/h2&gt;

&lt;p&gt;LESSでは、&lt;strong&gt;変数&lt;/strong&gt;、&lt;strong&gt;ミックスイン&lt;/strong&gt;、&lt;strong&gt;入れ子ルール&lt;/strong&gt;、&lt;strong&gt;名前空間&lt;/strong&gt;、&lt;strong&gt;四則演算と関数&lt;/strong&gt;などをCSSに追加することができる。&lt;br /&gt;
プログラミングの経験があるなら、それぞれ覚えがあるだろう機能達ばかりで、CSSには存在しない機能。&lt;/p&gt;

&lt;p&gt;オフィシャルサイトに詳しく利用法については説明があるので、詳細は&lt;a href=&quot;http://lesscss.org/&quot;&gt;こちら&lt;/a&gt;を確認してほしい。&lt;br /&gt;
もちろん英語なので、日本語訳が必要な場合はメールか&lt;a href=&quot;http://twitter.com/#!/cssradar&quot;&gt;Twitter@cssradar&lt;/a&gt;でリクエストを。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;変数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#4D926F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というLESSは、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#4D926F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#4D926F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;のように解釈される。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@+変数名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;で定義できる。正確には変数というよりは、定数に近い使われ方をしている。  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ただし、プログラミング言語と同じくスコープがあり、上記のようにローカルに定義がない場合は、親ルールから定義を探し、それでもなければグローバルを探すように作られている。&lt;br /&gt;
このスコープに関しては変数だけではなく、ミックスインの定義についても同様に扱われる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ミックスイン&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;こちらも実際にどのようにLESSで記述し、実際にCSSでどのように解釈されるのかを見た方が早いだろう。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.bordered&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;dotted&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というLESSで定義したミックスインを&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#menu&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bordered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;にしてルールセットの中に追加すると、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#menu&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;dotted&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CSSではこのように解釈される。  &lt;/p&gt;

&lt;p&gt;CSS3を利用する場合、まだまだ多くのベンダープリフィックスを追加しなければいけないのが現実。&lt;br /&gt;
そんな際にこのミックスインは威力を発揮する。&lt;br /&gt;
ミックスインはパラメータを渡したり、デフォルトを定義することもできるので、使い回しが効く機能でもある。&lt;br /&gt;
詳しい説明は、&lt;a href=&quot;http://lesscss.org/#-parametric-mixins&quot;&gt;こちら&lt;/a&gt;から。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;入れ子ルール&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;変数やミックスインももちろん強力な追加機能ではあるが、私の一番のお気に入りがこの入れ子ルール。  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.logo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.logo&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;という&lt;strong&gt;CSS&lt;/strong&gt;は、LESSでは&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigation&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.logo&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hover&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というように記述することができる。&lt;br /&gt;
何度もセレクタを書かずに済むだけではなく、DOMの構造とほぼ同じ構造になるし、なにより、このように記述することを覚えるとキレイにセレクタを整理する癖がつく。&lt;br /&gt;
なお、&lt;strong&gt;&amp;amp;:hover&lt;/strong&gt;という記述があるが、こちらは疑似クラス(:link、:visited、:hover、:focusなど)を追加するのに活躍する。&lt;br /&gt;
&lt;strong&gt;&amp;amp;&lt;/strong&gt;という結合子は、入れ子になったセレクタを子孫として扱わず、親セレクタに追加することができる。&lt;br /&gt;
なので、疑似クラスだけではなく、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.float.left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というようなマルチクラスの記述にも対応できる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;名前空間&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　こちらは変数やミックスインをまとめる際に活用できる機能。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#bundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hover&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;#bundle&lt;/strong&gt;という名前空間の中に&lt;strong&gt;.button&lt;/strong&gt;というミックスインを定義する。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#header&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;orange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;#bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このようにして呼び出すことが可能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;四則演算と関数&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;こちらは使ったことがまだないので、&lt;a href=&quot;http://lesscss.org/#-color-functions&quot;&gt;オフィシャルサイトで例&lt;/a&gt;を見てほしい。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;便利なミックスインのコレクション&lt;/h2&gt;

&lt;p&gt;自分がよく利用するルールのミックスインを定義しておけば、飛躍的にCSSの開発はスピードアップする。&lt;br /&gt;
フロントエンドデベロッパやウェブデザイナはいつだって時間が足りない職種なので、自分なりのコレクションを作って、&lt;a href=&quot;https://gist.github.com/&quot;&gt;Gist&lt;/a&gt;などに置いておくと便利だ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://markdotto.com/bootstrap/&quot;&gt;Bootstrap.less&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lesselements.com/&quot;&gt;LESS Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すでに便利なミックスインを公開している人もいるので、それらから自分の派生を作るほうが早いかも知れないので、ソースを見てみるといいだろう。&lt;/p&gt;

&lt;h2&gt;使い方&lt;/h2&gt;

&lt;p&gt;ここまで来てようやく使い方の説明になるが、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet/less&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;styles.less&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;less.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と使い方はとても簡単。&lt;br /&gt;
注意してほしいのは、&lt;strong&gt;rel=”stylesheet/less”&lt;/strong&gt;の部分だけだ。&lt;/p&gt;

&lt;p&gt;ちなみにGoogle Codeにレポジトリを持っているので、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet/less&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/stylesheets/styles.less&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://lesscss.googlecode.com/files/less-1.0.41.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすると何もダウンロードせずともLESSを使うことができる。&lt;/p&gt;

&lt;p&gt;さらに&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この記述をHTMLに追記しておけばlessファイルが保存されると、CSSがリフレッシュなしに変更が適応される。&lt;br /&gt;
毎回毎回リフレッシュするのは面倒な上、意外と時間の無駄なので、開発中はぜひ利用してほしい。&lt;/p&gt;

&lt;p&gt;なお、URLの末尾に&lt;strong&gt;#!watch&lt;/strong&gt;としても同じことができるので、開発後に記述を削除するのを忘れそうな人は、こちらをおすすめする。&lt;/p&gt;

&lt;h2&gt;開発が終わったら&lt;/h2&gt;

&lt;p&gt;node.jsで動作するサイトでない限りは、LESSの記述はCSSに展開する必要があるだろう。&lt;/p&gt;

&lt;p&gt;MacではGUIのアプリで行うこともできるが(&lt;a href=&quot;http://incident57.com/less/&quot;&gt;LESS.app&lt;/a&gt;)、WindowsではGUIアプリは見当たらない。おそらくLinuxでも同じだろう。&lt;br /&gt;
SASSではJavaで動作するクロスプラットフォームのUIがある。(&lt;a href=&quot;http://compass.handlino.com/&quot;&gt;Compass.app&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;私はnode.jsをコマンドラインから利用してLESSをCSSに展開している。&lt;br /&gt;
node.jsは恐ろしいほどのスピードで開発が進んでいるので、どの環境でも簡単にインストールすることができるようになってきた。&lt;/p&gt;

&lt;p&gt;node.jsのインストールについては&lt;a href=&quot;https://github.com/joyent/node/wiki/Installation&quot;&gt;こちら&lt;/a&gt;を参考に。&lt;/p&gt;

&lt;p&gt;Macを利用しているなら、Homebrewから0.40をインストールすることができる。&lt;br /&gt;
また、node.jsにもNPMというパッケージマネージャがあり、こちらでless.jsをインストールすることも簡単にできる。&lt;/p&gt;

&lt;p&gt;インストールが終わったら、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;lessc styles.less &amp;gt; styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすればいいだけ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;lessc -x　styles.less &amp;gt; styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;のように、&lt;strong&gt;-x&lt;/strong&gt;オプションをつけると圧縮したCSSとして展開される。&lt;/p&gt;

&lt;h2&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://markdotto.com/bootstrap/&quot;&gt;Bootstrap.less&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lesselements.com/&quot;&gt;LESS Elements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fadeyev.net/2010/06/19/lessjs-will-obsolete-css/&quot;&gt;Less.js Will Obsolete CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>ワイヤフレーム</title>
   <link href="http://css.studiomohawk.com/webdesign/2011/04/01/wireframe/"/>
   <updated>2011-04-01T00:00:00+09:00</updated>
   <id>http://css.studiomohawk.com/webdesign/2011/04/01/wireframe</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/webdesign/2011/04/01/wireframe/protoplate.png&quot; alt=&quot;Image&quot; class=&quot;huge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ワイヤフレームって作ったことありますか？&lt;br /&gt;
ワイヤフレームはウェブページのコンテントを視覚的に表現するドキュメントの中核を担う存在。
建築用語でいうところのブループリントと同じだろうか。&lt;/p&gt;

&lt;p&gt;52 Weeks of UXによると、UXデザイナにとって&lt;strong&gt;なくてはならない&lt;/strong&gt;モノであり、IAのベストフレンド、とさえある。(&lt;a href=&quot;http://52weeksofux.com/post/866406780/wireframing-is-not-a-religion&quot;&gt;Wireframing is not a religion&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;私が現在働いている会社にはもちろん、UXデザイナという職種もないし、IAという職種もない。デザイナがその一部を担っている。&lt;br /&gt;
私にとってもワイヤフレームはなくてはならないツールであり、ベストフレンド。現在担当しているプロジェクトでは、この数週間に60以上のワイヤフレームを作成している。&lt;br /&gt;
まだ一度もPhotoshopを開く事なく、ワイヤフレームをベースにしたプロトタイプも4ページほど作成してある。&lt;br /&gt;
どんな見た目になるのかはまだ誰もわからないが、どんなコンテンツがどこに必要で、どんなアクションがいつ必要なのかについては、共通の認識を持っている。
これこそがワイヤフレームの強みであり、存在意義。&lt;/p&gt;

&lt;h2&gt;ワイヤフレームの使用法&lt;/h2&gt;

&lt;p&gt;見てみないとわからない。&lt;br /&gt;
デザイナとして働いている私自身、外部のデザイナに仕事を依頼している場合に、そんな台詞を言うことがある。&lt;/p&gt;

&lt;p&gt;誰でもデザインについては、それぞれの主観を持つことができる。&lt;/p&gt;

&lt;p&gt;どこかで、見てみないとわからない、という人は、レストランでも食べてみないと注文できないのか、というようなことを言っている場面に出くわしたことがあるが、では、国産イノシシのシヴュや、オーストラリア産仔羊肉のナバラン仕立てとメニューにあったら、どれくらいの人がどんな味の料理が出てくるかわかるか？&lt;br /&gt;
私はいまだにポワレがなんだかも覚えられないくらいはフランス料理に詳しくはないから、私には無理だ。&lt;br /&gt;
でも、そんな料理を饗してくれるレストランには、それらがどんな料理なのか素人にもわかるように教えてくれるその道のプロフェッショナルがいるから、訊けばわかる。少なくとも想像することを手助けしてくれる。&lt;/p&gt;

&lt;p&gt;ワイヤフレームは&lt;em&gt;差異と類似を明確にする&lt;/em&gt;ツール。
&lt;a href=&quot;http://uxmovement.com/wireframes/how-to-get-clients-to-approve-your-wireframes-every-time&quot;&gt;How to Get Clients to Approve Your Wireframes Every Time@UX Movement&lt;/a&gt;でも言及されているが、
リデザイン前のデザインと、より効果的だと考えているワイヤフレームを比較することで違いを提示する。クライアントの要望に近しいデザインとの類似をワイヤフレームで提示する。
この2つの比較はPhotoshopで作成した精度の高いモックアップでも可能だ。しかし、ワイヤフレームのフットワークの良さは、より効率的にパターンを生み出す原動力になる。&lt;br /&gt;
幾つかのワイヤフレームのパターンの中で、差異や類似を提示することももちろんできる。&lt;/p&gt;

&lt;h2&gt;もう1つのワイヤフレームの使用法&lt;/h2&gt;

&lt;p&gt;ワイヤフレームは思考を助けるツールでもある。
思考を集約することも、拡張することも、とても自然に行うことができる。&lt;br /&gt;
最前この数週間で60以上のワイヤフレームを作ったと書いたけれど、その内、私自身もプロジェクトメンバも納得できる状態になっているのは4枚くらいだ。&lt;br /&gt;
その4枚については、合わせて10回以上は繰り返して変更を加えてきている。&lt;br /&gt;
私が実際にワイヤフレームを作成している時間は非常に短い。Photoshopで高精度なモックアップを60枚作り、4枚を10回以上は修正する、なんてただの悪夢でしかない。
人は誰でも、ある事柄に費やした時間に比例して、その事柄に愛着を持ってしまう習性がある。&lt;br /&gt;
デザイナやコーダにとって、修正はいつだってつらいのはそのためだ。たとえその修正が圧倒的に効果的だと思っていても、いつでも芽生えた愛着と天秤にかける自分がいる。&lt;br /&gt;
だからこそ、素早く作成も修正も行うことができるワイヤフレームの作成方法を模索する必要がある。&lt;/p&gt;

&lt;p&gt;また、デザインは問題を解決するための手段であるとよく言われる。ワイヤフレームは問題を見つけ出す手段でもあるところが大きな違い。&lt;br /&gt;
迷子になっている人が、今自分がどこにいるのか把握できないのと同じく、問題を明確にできなければ、解決することは不可能。
その問題を浮き彫りにするためのツールとしてもワイヤフレームは有効だ。&lt;/p&gt;

&lt;h2&gt;ワイヤフレームツール&lt;/h2&gt;

&lt;p&gt;フリーのツールも、有料のツールも、画像編集アプリケーションと同じくらいの種類があるワイヤフレームツール。
中には実際にクリックしたり、マウスオーバできたりとインタラクションすら簡単に作成できる高度なツールも存在する。&lt;/p&gt;

&lt;p&gt;私が利用しているのは、&lt;a href=&quot;http://balsamiq.com/&quot;&gt;Balsamiq&lt;/a&gt;。手書き風のワイヤフレームを簡単に作成できるAdobe
Airアプリ。環境を選ばないし、ライセンス1つで自分が使用している端末なら数に制限無くインストールできる。&lt;br /&gt;
$79とやや高額な価格設定かと思うかも知れないが、幾つかのツールを試用してみて、マニュアルなしでも利用できる手軽さと、意外なまでに拡張性がある部分を評価して購入した。&lt;br /&gt;
今やBalsamiqでワイヤフレームだけではなく、ワークフローやサイトマップも作成したりもするようになり、Balsamiqを使わない日はない。&lt;/p&gt;

&lt;p&gt;多くのウェブアプリも存在するジャンルではあるが、私はブラウザで作業するのがやや苦手なのでデスクトップアプリに絞って探したが、
&lt;a href=&quot;https://gomockingbird.com/&quot;&gt;gomockingbird&lt;/a&gt;やFirefoxのアドオンとしても動作する&lt;a href=&quot;http://pencil.evolus.vn/en-US/Home.aspx&quot;&gt;Pencil Project&lt;/a&gt;なども試してみるといいだろう。&lt;/p&gt;

&lt;p&gt;デスクトップアプリでBalsamiqと最後まで悩んだのが、&lt;a href=&quot;http://www.flairbuilder.com/&quot;&gt;flairbuilder&lt;/a&gt;。こちらはbalsamiqよりも高機能で実際に動作するプロトタイプを作成できる強みがある。
ただワイヤフレームアプリにおいては、シンプルさを優先した方が確実に効率的だということで、Balsamiqを選択した。&lt;/p&gt;

&lt;p&gt;もちろん、使い慣れたPhotoshopやFireworksなども工夫をすれば、かなり効率的にワイヤフレームを作ることができるはずだ。  &lt;/p&gt;

&lt;h2&gt;ドキュメントとしてのワイヤフレーム&lt;/h2&gt;

&lt;p&gt;37Signalsの&lt;a href=&quot;http://gettingreal.37signals.com/ch11_Dont_Do_Dead_Documents.php&quot;&gt;Don’t Do Dead Documents&lt;/a&gt;にて、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a wireframe document is destined to stop and never directly become the actual design, don’t bother doing it. 
If the wireframe starts as a wireframe and then morphs into the actual design, go for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とある、&lt;br /&gt;
要約すると、ワイヤフレームを単純なドキュメントとして作成するなら、ワイヤフレームの存在に意味はなく、本当のデザインに変化していくなら、作るべきだということ。&lt;/p&gt;

&lt;p&gt;ドキュメンテーションはどんな職種でも必要になるアウトプットの1つだと思うが、デザイナも例外無く成果物の1つとしてドキュメントがあるだろう。
ワイヤフレームはデザイナのドキュメントとしてはもっとも視覚的なドキュメントになるはずなので、ないよりはあった方がインパクトがあるかも知れないが、
37Signalsの記事で言及されているように、デザインに昇華しないワイヤフレームは単純に時間の無駄なので、その時間を追加のパターンの作成や、追加の修正に費やした方がいい。&lt;/p&gt;

&lt;p&gt;私にとっては、思考を手助けしてくれるツールの側面がまずあり、そこからデザインへの昇華は自然なフローとなっているので、ワイヤフレームは飛ばすことができないタスクの1つ。&lt;/p&gt;

&lt;h2&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.uxmag.com/design/shades-of-grey-wireframes-as-thinking-device&quot;&gt;uxmag&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://52weeksofux.com/post/866406780/wireframing-is-not-a-religion&quot;&gt;52weeksofux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://leehardingonline.co.uk/2010/06/the-value-of-wireframing/&quot;&gt;The Value of Wireframing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://userpathways.com/2008/06/the-what-when-and-why-of-wireframes/&quot;&gt;The what, when and why of wireframes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.uxmag.com/design/shades-of-grey-wireframes-as-thinking-device&quot;&gt;Shades of Grey: Wireframes as Thinking Device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML5 Boilerplate</title>
   <link href="http://css.studiomohawk.com/tool/2011/03/15/html5boilerplate/"/>
   <updated>2011-03-15T00:00:00+09:00</updated>
   <id>http://css.studiomohawk.com/tool/2011/03/15/html5boilerplate</id>
   <content type="html">&lt;p&gt;フロントエンドデベロッパな人たちはウェブ開発プロジェクトを始めるにあたり、HTML、CSS、JSのスケルトン(必要最小限の記述をしたファイル達)を含んだディレクトリを持っている人が多い事だろう。&lt;br /&gt;
私も個人のプロジェクト、仕事でのプロジェクトともに、それぞれに少しだけカスタマイズを行うだけで開発を始めることができるディレクトリを持っている。  &lt;/p&gt;

&lt;p&gt;今回紹介する(おそらくすでに紹介するまでもないほど知られているが)&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;HTML5 BOILERPLATE&lt;/a&gt;は、Paul IrishとDivya Manianを中心として生み出された膨大な量の知見を詰め込んだHTML5を使ったプロジェクト用のスタートポイント。&lt;br /&gt;
知っての通り、HTML5を使い始めるのは決して今からでも&lt;strong&gt;早すぎるということは決してない&lt;/strong&gt;が、HTML5に対応するなんてまだ先、と思っていても、このHTML5
BOILERPLATEに詰め込まれたベスト中のベストプラクティスを吸収しておけば、現在のプロジェクトもより盤石にすることができるはずだ。&lt;/p&gt;

&lt;h2&gt;HTML5 Boilerplateの特筆すべき5つのポイント&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.modernizr.com/&quot;&gt;Modernizr&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;ModernizrはJavaScriptを利用して、ブラウザでサポートしているHTML5/CSS3機能を検出し、HTMLタグ内のclassにサポート状況を出力したり、IEにおけるHTML5要素のスタイル設定行うユーティリティライブラリ。&lt;br /&gt;
HTML5での開発には欠かす事ができないライブラリ。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/paulirish/html5-boilerplate/blob/master/css/style.css&quot;&gt;CSS&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;HTML5用リセットCSSをベースに、非常に強固なデフォルトスタイルと.clearfixなど便利なツールClassが用意されている。クロスブラウザ対応はIE6にも対応してあり、日本ではまだまだ現実的な対応として求められる箇所なだけに非常に便利。&lt;br /&gt;
また、プリント用のメディアクエリや、スマートフォン用に使えるメディアクエリの記述もされている&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/paulirish/html5-boilerplate/blob/master/index.html&quot;&gt;HTML&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;IEコンディショナルコメントを活用したIE用Classの生成を始めとして、HTML5の新要素を含んだ形で、かつ最小限のスケルトンとして提供されている。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/paulirish/html5-boilerplate/tree/master/js&quot;&gt;JavaScript&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Google
CDNが落ちてもローカルからjQueryを呼び出すスニペットを始めに、ユニットテストを行いやすいような設計でJavaScriptのファイル群は用意されている。jQueryの利用を前提にして、プラグインの呼び出しを記述するファイルなどが用意されている。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;パフォーマンス最適化&lt;/p&gt;

    &lt;p&gt;HTML5
Boilerplateでは、クロスブラウザ対応などはもちろんとして、パフォーマンス最適化を最も重視した構成になっている。&lt;br /&gt;
JSをドキュメントの最後に配置するという非常に当たり前の事から、.htaccessファイルによる最適化(gzipやファイルのキャッシュ設定など)も提供されており、少し前のバージョンからはAntを利用したビルドスクリプトを使って、ファイルの圧縮、結合、キャッシュバスタの設定、画像ファイルの最適化などを自動(コマンドは使うが)で行えるようにできるようにしている。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;HTML5 Boilerplateの入手方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://html5boilerplate.com/&quot;&gt;http://html5boilerplate.com/&lt;/a&gt;から最新の安定板(1.0
RC
2011/03/11現在)をダウンロードすることができる。まずは、コメントありのファイルをダウンロードして、一通りソースコードを読んでみる事をおすすめする。非常に勉強になる事ばかり。&lt;/p&gt;

&lt;p&gt;つい先日から、&lt;a href=&quot;http://jp.html5boilerplate.com/&quot;&gt;http://jp.html5boilerplate.com/&lt;/a&gt;日本語に翻訳されたバージョン(私が翻訳を行いました。完璧とは言いがたい訳です。誤訳やよりよい翻訳があれば、&lt;a href=&quot;https://github.com/studiomohawk/html5boilerplate-site&quot;&gt;githubにて翻訳プロジェクトをクローン&lt;/a&gt;していますので、フィードバックをお待ちしています）も利用できるようになっている。&lt;/p&gt;

&lt;p&gt;また、&lt;a href=&quot;https://github.com/paulirish/html5-boilerplate&quot;&gt;Github&lt;/a&gt;からでも入手可能なので、Gitを扱い慣れている場合はそちらから。ブランチとしてコメントのある、なしを選べる(masterがコメントあり、strippedがコメントなし)&lt;/p&gt;

&lt;p&gt;他にも15秒でHTML5
Boilerplateをベースに必要なスターティングポイントを生成してくれるサービス、&lt;a href=&quot;http://initializr.com/&quot;&gt;Initializr&lt;/a&gt;というサイトもある。&lt;br /&gt;
コメント、JavaScript、jQuery(圧縮するか、否かも)、Modernizrの利用、サーバ側の設定ファイル、Google
Analyticsの要不要など、カスタマイズすることが可能。&lt;/p&gt;

&lt;h2&gt;ビルドスクリプトの使い方&lt;/h2&gt;

&lt;p&gt;私もAntに詳しくないのでHTML5
Boilerplateのビルドスクリプトの使い方については、IBMのデベロッパワークにお任せすることに。詳しくは&lt;a href=&quot;http://www.ibm.com/developerworks/jp/web/library/wa-html5boilerplate/#build&quot;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;私自身はRakeに慣れてきたので、AntのビルドスクリプトをRakeに置き換えてみようかなと思っている。すでにRakeマスタな人がいたら、ぜひ本家のHTML5
BoilerplateにPull Requestを送ってくださいませ。&lt;/p&gt;

&lt;h2&gt;HTML5 Boilerplateについてもっと詳しく&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=qyM37XKkmKQ&quot;&gt;Paul Irish on HTML5 Boilerplate @YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://net.tutsplus.com/tutorials/html-css-techniques/the-official-guide-to-html5-boilerplate/&quot;&gt;The Official Guide to HTML5 Boilerplate @Nettuts+&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/jp/web/library/wa-html5boilerplate/&quot;&gt;HTML5 Boilerplate を使用して Web 開発を容易に始める @IBM Developer Works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.1stwebdesigner.com/design/snippets-html5-boilerplate/&quot;&gt;20 Snippets You should be using from Html5 Boilerplate @1st Web Designer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>ターミナルを使いこなす</title>
   <link href="http://css.studiomohawk.com/tool/2011/02/13/terminal-101/"/>
   <updated>2011-02-13T00:00:00+09:00</updated>
   <id>http://css.studiomohawk.com/tool/2011/02/13/terminal-101</id>
   <content type="html">&lt;p&gt;Terminal.appは怖い。&lt;br /&gt;
GUIでなんだって出来る時代にパソコンに出会った私にとっても、それは変わらない。&lt;br /&gt;
Macをメインで使い始める前、たっぷり3年以上もUbuntuというLinuxディストリビューションをメインで使っていた私でも、Terminalで何かをしなければならない時しか開くことはなかった。  &lt;/p&gt;

&lt;p&gt;MacVimをメインのエディタにしてから3ヶ月ほど、年明けから&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;を使ってブログを作成しはじめた。Rubyを覚えてみようと今年から勉強中。&lt;br /&gt;
自分自身考えてもいなかったが、それらすべてがターミナルの便利さを教えてくれた。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MacVimでは、もちろんコマンドを実行できるが、コマンドそのものとは関係なく、インサートモードとノーマルモードの切り替えというメンタリティはGUIとCUIのメンタリティと似てる。それに覚えるのに時間はかかるかもしれないが、一旦覚えてしまうともう戻れない中毒性に近い利便性を手に入れる楽しみも覚えられた。&lt;/li&gt;
  &lt;li&gt;Jekyllはターミナルを使わなければブログの更新すら出来なくなる。基本的なコマンドはJekyllを使ううちに覚えてしまった。  &lt;/li&gt;
  &lt;li&gt;Rubyはirbで実際にRubyを使って気楽に自分の書いたコードをテストしたりするのにターミナルを利用している。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ソースコードリーディングのテキストとしてお気に入りのHTML5 Boilerplateで、&lt;a href=&quot;https://github.com/paulirish/html5-boilerplate/wiki/Build-script&quot;&gt;Build
Script&lt;/a&gt;が追加され、フロントエンドデベロッパの間でも、自前のオートメーションを作ることが当たり前になってきそうな流れもある。
そんなタイミングだからこそ、ターミナルを使いこなせる人になろうと、こんな時代に提言したい。&lt;/p&gt;

&lt;p&gt;私のように家ではMacで会社ではWindowsという人も多いだろう、今回はMacについての紹介になるが、きっかけさえつかんでしまえば、どうにかなる。ちなみに私はWindowsでは&lt;a href=&quot;http://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt;を&lt;a href=&quot;http://sourceforge.net/projects/console/&quot;&gt;Console&lt;/a&gt;から利用している。&lt;/p&gt;

&lt;h2&gt;まずは見た目からカスタマイズ&lt;/h2&gt;

&lt;p&gt;私はGUIアプリでも、たとえそれがいかに便利でも見た目が悪いと長続きしないタチ。本末転倒かもしれないが、そんな性格がウェブデザイナとしての自分を支えていると思い込んでいる。&lt;br /&gt;
だからこそ、ターミナルにも見た目を要求したい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://visor.binaryage.com/&quot;&gt;Visor&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Visorはターミナルをショートカットキーで呼び出すことが出来るTerminal.appのヘルパ。&lt;strong&gt;control+control&lt;/strong&gt;で画面の1/3ほどのターミナル画面がスライドしてくる便利でかつ、おしゃれなツール。&lt;br /&gt;
Macでは&lt;a href=&quot;http://sites.google.com/site/iterm2home/&quot;&gt;iTerm2&lt;/a&gt;というターミナル互換アプリも人気があるようで、こちらはVisorとは連動できないが、同じようにショートカットキーで呼び出すことができるオプションがある。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/824504&quot;&gt;.bashrc&lt;/a&gt;(リンク先は私が利用している.bashrcファイルの一部)&lt;/p&gt;

    &lt;p&gt;デフォルトでTerminalを開くと、黒い背景に白い文字。あまりにも地味なので、私はもう少しだけカラフルにしている。&lt;br /&gt;
そのついでに&lt;a href=&quot;/tool/2011/01/29/git-version-control/&quot;&gt;Git&lt;/a&gt;をターミナルで使いやすくなるように、ブランチ名や変更を知らせてくれるマークもカラーをつけて表示している。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちょっとカスタマイズしてあげるだけで気持ちよく利用することができる。  &lt;/p&gt;

&lt;h3&gt;Mac OSXでターミナルにgitのブランチ名を表示する方法&lt;/h3&gt;

&lt;p&gt;少し話から外れるがせっかくなのでその方法を紹介しよう。&lt;br /&gt;
まずはgitのオートコンプリーションを探してみよう。  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/local/git/contrib/completion/git-completion.bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通常であれば、上記のようなファイルがあるはずだ。もしなければ、&lt;a href=&quot;https://github.com/git/git/tree/master/contrib/completion&quot;&gt;こちら&lt;/a&gt;にファイルがあるので、&lt;code&gt;/usr/local/git/contrib/completion/&lt;/code&gt;というディレクトリに&lt;code&gt;git-completion.bash&lt;/code&gt;という名前で保存してほしい。&lt;/p&gt;

&lt;p&gt;そして次は.bashrc。&lt;br /&gt;
MacVimを利用している人なら見覚えがある.(ドット)ファイル。.bashrcはTerminalの中で働いているBashの設定ファイル。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/824504&quot;&gt;gist&lt;/a&gt;にも置いてあるが&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# git settings&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/local/git/contrib/completion/git-completion.bash
&lt;span class=&quot;nv&quot;&gt;GIT_PS1_SHOWDIRTYSTATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\w\[\033[31m\]$(__git_ps1)\[\033[00m\]\$ &amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git用のカスタマイズは上記の部分。こちらだけでも.bashrcファイルの最後の方に追加しておけば、設定終了。&lt;br /&gt;
もし.bashrcファイルが見当たらないようであれば、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;touch ~/.bashrc
open ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;として、開いたエディタに上記のスニペットを追加すればOK。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;保存したら、上記のコマンドで変更を反映できる。&lt;/p&gt;

&lt;h2&gt;ターミナルの使い方&lt;/h2&gt;

&lt;p&gt;私自身もまだまだ基本的なコマンドしかソラでは実行できない。必要に応じてコマンドは覚えていけばいいので、自分のペースで続けていってほしい。&lt;br /&gt;
まずはターミナルで使える便利なショートカットキーを、そして実際にいくつかコマンドを見ていこう。&lt;/p&gt;

&lt;h3&gt;ショートカットキー&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;control + A&lt;/strong&gt; / 現在のラインの一番始めに移動&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;control + H&lt;/strong&gt; / 現在のラインの一番最後に移動&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;control + U&lt;/strong&gt; / 
現在位置より手前のラインを削除。ラインの一番最後の場合はラインを削除になる。間違ってオートコンプリートしてしまったときや癖で上カーセルを叩いてしまった場合に便利&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;control + C&lt;/strong&gt; / 現在動作しているプロセスを終了する&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;command + T&lt;/strong&gt; / 新しくタブを作る。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tab&lt;/strong&gt; / 
ファイル名やディレクトリ名をオートコンプリートしてくれる。先ほど設定したgitのオートコンプリートも同じキーでOK&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;上カーソル&lt;/strong&gt; / ターミナルのヒストリを呼び出してくれる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ほかにもまだまだショートカットキーはあるが、私が普段使い出来るショートカットはこんな感じだ。&lt;/p&gt;

&lt;h3&gt;コマンド&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;cd&lt;/strong&gt; &lt;/p&gt;

    &lt;p&gt;Change Directoryの略。&lt;code&gt;cd
DIR_NAME&lt;/code&gt;のように、移動したいディレクトリ名を入力する。&lt;br /&gt;
&lt;code&gt;Tab&lt;/code&gt;を使って、オートコンプリートできるし。&lt;code&gt;cd DIR_NAME/CHILD_DIR_NAME&lt;/code&gt;というようにさらに深い階層へもいける、/の後も数文字タイプしたらきちんとオートコンプリートしてくれる。&lt;br /&gt;
&lt;code&gt;cd ..&lt;/code&gt;とすれば親ディレクトリに移動、&lt;code&gt;cd
~&lt;/code&gt;とすればルートディレクトリに移動となる。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pwd&lt;/strong&gt; / 現在のディレクトリを表示してくれる。ふと迷子になりがちなので便利&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;ディレクトリ内のファイル、ディレクトリを表示するコマンド。&lt;br /&gt;
&lt;code&gt;ls
DIR_NAME&lt;/code&gt;とすれば、DIR_NAMEの中のファイル、ディレクトリを表示しれくてる。&lt;br /&gt;
&lt;code&gt;ls
-l&lt;/code&gt;とすると、ファイル、ディレクトリの詳細の情報つきでリスト表示しれくてる。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;touch&lt;/strong&gt; / ファイルを作成するコマンド。&lt;code&gt;touch
style.css&lt;/code&gt;とすれば、現在のディレクトリにstyle.cssを生成してくれる。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;open&lt;/strong&gt;
/ こちらはファイルやディレクトリを関連づけしてあるアプリで開いてくれるコマンド。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mkdir&lt;/strong&gt; / ディレクトリを生成するコマンド。&lt;code&gt;mkdir
DIR_NAME&lt;/code&gt;でDIR_NAMEというディレクトリを作成できる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだまだたくさんのコマンドがあるが、私が安心して利用できる基本コマンドはこれくらいだ。ファイルをコピーしたり、削除したりするコマンドは不安が残るので少し慣れたら使い始めるといいだろう。&lt;br /&gt;
とりあえずのところは、&lt;code&gt;open
DIR_NAME&lt;/code&gt;としてFinderを立ち上げてコピーや削除をすれば問題ない。&lt;/p&gt;

&lt;h2&gt;パッケージマネジャ&lt;/h2&gt;

&lt;p&gt;Bashだけでももちろん協力なツールではあるが、せっかくだからもっとたくさん機能を追加してみたい。&lt;br /&gt;
RubyやPython、Javaなどコマンドラインでも使える強力なツールがあるが、これらのツールを管理するのはとても大変。そのために&lt;strong&gt;パッケージマネジャ&lt;/strong&gt;が必要になってくる。&lt;/p&gt;

&lt;p&gt;Macにはデフォルトで使えるパッケージマネジャはインストールされていない。MacPortやFink、そして今回紹介するHomebrewがマックではデファクトとされている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt;はシンプルで強力な、新しい世代のパッケージマネジャ。非常に簡単にインストールできるし、利用も簡単なので、初心者にはもってこいのパッケージマネジャ。&lt;br /&gt;
私はHomebrewでgitをインストールし直した。こちらのほうがアップデートが簡単にできるということで。&lt;/p&gt;

&lt;h2&gt;Homebrewのインストール&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://developer.apple.com/technologies/xcode.html&quot;&gt;xcodeをインストール&lt;/a&gt;、Macで開発するのに当たって絶対に必要になってくるのでxcodeをインストール。Homebrewでも使う。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;ruby -e &quot;$(curl -fsSLk https://gist.github.com/raw/323731/install_homebrew.rb)&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上でインストールが完了する。&lt;/p&gt;

&lt;p&gt;早速インストールが終わっているか確認してみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;0.7.1らしいバージョンナンバが表示されれば問題ない。&lt;/p&gt;

&lt;p&gt;それでは、早速ツールをインストールしてみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install curl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;curlはさまざまなプロトコルを用いてデータを転送するライブラリ。(by &lt;a href=&quot;http://ja.wikipedia.org/wiki/CURL&quot;&gt;Wikipedia
cURL&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew
search&lt;/code&gt;とすれば、インストールできるツールの一覧を表示してくてる。&lt;code&gt;brew
list&lt;/code&gt;とすると、インストールされているツールの一覧を表示してくれる。&lt;/p&gt;

&lt;p&gt;英語ではあるが、brewのコマンドは&lt;a href=&quot;https://github.com/mxcl/homebrew/wiki/The-brew-command&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;ターミナルの世界へようこそ&lt;/h2&gt;

&lt;p&gt;ここまでできたら、すっかりコマンド使いっぽく見える。コマンドラインになれてきたら次のステップはオートメーション。&lt;br /&gt;
私はRubyのRakeを使って、いろいろなタスクを自動化しはじめている。&lt;br /&gt;
興味があれば、まずはHTML5 Boilerplateの&lt;a href=&quot;https://github.com/paulirish/html5-boilerplate/wiki/Build-script&quot;&gt;Build
Script&lt;/a&gt;について調べてみるといいだろう。&lt;br /&gt;
現時点では、HTMLを圧縮したり、CSSをコンバインして圧縮したり、Jpeg、PNGのファイルサイズを最適化したりと実に様々なフロントエンドなタスクを自動化している。HTML5 Boilerplateではantというビルドツールを活用している。  &lt;/p&gt;

&lt;p&gt;Rubyでは&lt;a href=&quot;https://github.com/flyerhzm/css_sprite&quot;&gt;CSS
Spriteを自動化&lt;/a&gt;したりすることもできるようなので、あの30分はかかりそうな面倒なspriteも自動で行うことができるわけだ。&lt;/p&gt;

&lt;p&gt;どこかの本で読んだことの受け売りだが、60分かかるタスクがあるとしたら、59分かけてそのタスクを行うスクリプトを書いて、1分で実行する。これからのウェブデザイン/フロントエンドデベロッパにはそんな心構えが必要になってくるだろう。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gitでバージョンコントロール</title>
   <link href="http://css.studiomohawk.com/tool/2011/01/29/git-version-control/"/>
   <updated>2011-01-29T00:00:00+09:00</updated>
   <id>http://css.studiomohawk.com/tool/2011/01/29/git-version-control</id>
   <content type="html">&lt;p&gt;バージョンコントロール。まだ始めていなかったら、今からでも遅くはない。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作業用フォルダがstyle.bk20110128なんて名前であふれている&lt;/li&gt;
  &lt;li&gt;なんでこの変更したのか、覚えていない。もう3ヶ月も前の話だし&lt;/li&gt;
  &lt;li&gt;誰が最新のファイル持ってるかわからないまま、作業を開始、もう1度やり直し&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTMLであろうと、CSSであろうと、JSであろうと、何であろうとソースコードを人間は必ずどこかで例のような目にあうのだ。    &lt;/p&gt;

&lt;p&gt;バックアップも、更新履歴も、システムでやればいいじゃない。を解決してくれるのが&lt;em&gt;Git&lt;/em&gt;。&lt;br /&gt;
セットアップも簡単で、利用するのも簡単。
あのLinuxの父、Linus TorvaldsがLinux Kernelを管理するために開発した、というオリガミは信頼の証。&lt;/p&gt;

&lt;h2&gt;Gitのインストール&lt;/h2&gt;
&lt;p&gt;※以下はMac環境での説明になるが、Windowsでもほとんど変わらない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/git-osx-installer/downloads/list?can=3&quot;&gt;OSX Installer for Git&lt;/a&gt;から、自分のOSバージョンにあわせてdmgをダウンロード。&lt;a href=&quot;http://code.google.com/p/msysgit/downloads/list?can=3&quot;&gt;Winはこちら&lt;/a&gt;&lt;br /&gt;
あとはインストーラにお任せ。&lt;/p&gt;

&lt;p&gt;私は&lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt;を使って、Gitをインストールした。&lt;/p&gt;

&lt;p&gt;Gitはアプリケーションフォルダには&lt;em&gt;入らない&lt;/em&gt;系統のアプリ。Terminalで使える。&lt;br /&gt;
&lt;em&gt;Terminal&lt;/em&gt;(日本語だと端末？)の時点で、たぶん半数以上のユーザの興味を奪った自信があるが、騙されたと思って立ち上げてほしい。アプリケーションフォルダのユーティリティフォルダにあるはずだ。  &lt;/p&gt;

&lt;p&gt;では、&lt;code&gt;git --version&lt;/code&gt;&lt;br /&gt;
をTerminalへコピペしてみてほしい。ちゃんとインストールできていれば、&lt;br /&gt;
&lt;code&gt;git version 1.7.1.1&lt;/code&gt;&lt;br /&gt;
というような表示がされるだろう。&lt;/p&gt;

&lt;p&gt;で、コマンドラインでしか使えないの？ なんてことはないので、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.syntevo.com/smartgit/index.html&quot;&gt;SmartGit&lt;/a&gt;(個人利用はフリー、Winにも対応)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.git-tower.com/&quot;&gt;Tower&lt;/a&gt;(betaテスト中フリー、Macのみ)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/tortoisegit/&quot;&gt;TortoiseGit&lt;/a&gt;(フリー、Winのみ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちら、GitをGUIで利用できるようにするアプリ達。私はTowerをテストしつつ、Macでも、Winでも使えるSmartGitをメインで利用している。どちらも日本語版はないが、基本の用語さえ覚えてしまえば問題ないだろう。
GUIアプリをインストールしても、もう少しTerminalは開いたままに。&lt;/p&gt;

&lt;h2&gt;Gitの基本用語&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;レポジトリ(Repository)&lt;/em&gt; - 更新履歴などを管理するバージョンコントロールの要になる保管庫。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;コミット(Commit)&lt;/em&gt; - エディタでいうならば保存に近いコミット。Gitに対して変更が完了したよ、と伝えるコマンド。コミットにはメッセージが必要で、どこをどうして変更したのか伝えることで履歴管理が可能になる&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;クローン(Clone)&lt;/em&gt; - Gitでは0からレポジトリを作成するのも簡単だが、既存のレポジトリをクローンすることができる。多人数で開発をする際は非常に便利&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ブランチ(Branch)&lt;/em&gt; - メインの開発からの分岐を作成するブランチ。&lt;q&gt;“Git のブランチモデルは、Git の機能の中でもっともすばらしいものだという人もいるほど”&lt;/q&gt; &lt;cite&gt;&lt;a href=&quot;http://progit.org/book/ja/ch3-0.html&quot;&gt;Pro Git&lt;/a&gt;&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Gitをインストールした後にやるべきこと&lt;/h2&gt;

&lt;p&gt;Terminalはまだ開いたままだろうか？&lt;br /&gt;
準備が整ったら以下のコマンドを、必要な部分は修正してから、Terminalにて実行。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;まずは自己紹介をしよう&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;名前&amp;quot;&lt;/span&gt;
git config --global user.email メールアドレス@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;標準のエディタを設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*Terminalから利用する場合にコミットメッセージを書くのに使うエディタ。たいていの場合Terminalのデフォルト、viかvimが使われる。それ以外のエディタが好みの場合は設定しよう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global core.editor emacs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ホワイトスペースを無視する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gitではホワイトスペース1つを追加しても、ファイルを変更したと認識される(Rubyではホワイトスペースは大事)が、大抵の場合、ホワイトスペース1つでコミットする、ということもないだろう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global apply.whitespace nowarn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;すべてのGitレポジトリに無視ファイルを適応&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Macなら.DS_Store(普段は見えないけれど、Gitは認識する)など、OSが自動で生成するファイルとか、毎回.gitignore(無視リストファイル)を、レポジトリに追加したり、その.gitignoreをコミットしたりするのは面倒。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global core.excludesfile ~/.gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このコマンドのままだと、ホームディレクトリに.gitignoreがあるから–globalで読んでねという意味になる。&lt;br /&gt;
私はこのファイルを&lt;a href=&quot;http://db.tt/jxIW2Rp&quot;&gt;Dropbox&lt;/a&gt;を使って、すべての環境で同じファイルを見るようにしている。&lt;/p&gt;

&lt;p&gt;Dropboxにdotというディレクトリを作成し、その下に.gitignoreファイルを作成してる&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global core.excludesfile /Users/&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ユーザディレクトリ&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;/Dropbox/dot/.gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Macならこんな具合。&lt;/p&gt;

&lt;p&gt;.gitignoreファイルの文法は&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# &amp;#39;#&amp;#39; から始まる行はコメント&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# foo.txtというファイル名は無視&lt;/span&gt;
foo.txt
&lt;span class=&quot;c&quot;&gt;# .htmlで終わるファイルを無視。&amp;#39;\*&amp;#39;はワイルドカード&lt;/span&gt;
*.html
&lt;span class=&quot;c&quot;&gt;# &amp;#39;!&amp;#39;は例外。上の例から引き続きで、.htmlで終わるファイルは無視するけどfoo.htmlは例外。&lt;/span&gt;
!foo.html

&lt;span class=&quot;c&quot;&gt;# Macユーザなら、下記で基本はOK。参考: https://github.com/github/gitignore/blob/master/Global/OSX.gitignore&lt;/span&gt;

.DS_Store?
Icon?
&lt;span class=&quot;c&quot;&gt;# Thumbnails&lt;/span&gt;
._*
&lt;span class=&quot;c&quot;&gt;# Files that might appear on external disk&lt;/span&gt;
.Spotlight-V100
.Trashes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2&gt;Gitの基本的なワークフロー&lt;/h2&gt;

&lt;p&gt;それでは先ほど紹介した用語と、ほかのいくつかのGitのコマンドを交えながらGitの基本的なワークフローを説明しよう。&lt;/p&gt;

&lt;p&gt;その前に少しTerminalで使えるコマンドを少々。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;cd&lt;/em&gt; - ”Change Directly”。ディレクトリを変更するコマンド。&lt;code&gt;cd ../&lt;/code&gt;とすれば、親ディレクトリにも移動できる、HTMLのリンクと同じ。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;pwd&lt;/em&gt; - 現在のディレクトリを教えてくれる。Macだけかも&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ls&lt;/em&gt; - 現在のディレクトリに含まれるファイルをリストアップしてくれる、Winだと&lt;code&gt;ls -a&lt;/code&gt;としないとだめ？&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;touch&lt;/em&gt; - ファイルを作成できる。&lt;code&gt;touch style.css&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ファイルの移動や、削除ももちろんコマンドでできるが。慣れないうちは上記の4つで十分だ。私もコマンドになれてきたとはいえ、使うBashコマンドの7割は上記の4つという程度。&lt;/p&gt;

&lt;p&gt;それでは、Gitの世界へようこそ。最初は面倒だなと思うこともあるけれど、これから幾多の困難をともにする強力なパートナとなってくれるだろう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既存のレポジトリをクローンしない場合、&lt;code&gt;git init&lt;/code&gt;はgitのスタートを告げるコマンド。&lt;br /&gt;
作業ディレクトリに対して.gitディレクトリを作成する。  &lt;/p&gt;

&lt;p&gt;Macユーザ、恐れるなかれ、.gitディレクトリ、だけではないが.(ドット)から始まるファイル、ディレクトリは普通はFinderには見えない隠し要素になる。&lt;br /&gt;
Terminalで&lt;code&gt;ls&lt;/code&gt;とすれば、きちんと存在が確認できる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;defaults write com.apple.finder AppleShowAllFiles TRUE
killall Finder
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;または上記のコマンドを叩くと見えるようになる。&lt;br /&gt;
おお、うざい。と思ったら、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;defaults write com.apple.finder AppleShowAllFiles FALSE
killall Finder
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;で元に戻せる。&lt;a href=&quot;http://totalfinder.binaryage.com/&quot;&gt;TotalFinder&lt;/a&gt;というFinderにタブを追加できるアプリケーションなら、GUIでOn/Offできる機能もついてくるのでおすすめ($15)(ちょっと重いけど、便利)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.gitが作成された作業ディレクトリに必要なファイルを作成/コピーしてきたら、&lt;code&gt;git add&lt;/code&gt;コマンドで、ファイルをレポジトリに追加する。&lt;br /&gt;
私は大概&lt;code&gt;git add .&lt;/code&gt;としてしまう。最後の.(ドット)は、まだレポジトリに追加されていないファイル全部、という意味だ。&lt;br /&gt;
もちろん、&lt;code&gt;git add ファイル名&lt;/code&gt;としてファイルを1つづつ追加することも可能。&lt;/p&gt;

&lt;p&gt;※readme.mdというテキストファイルを追加して、そこにプロジェクトの概要などを書き留めておくと、便利だ。.mdはMarkdownというライトウェイトマークアップ言語の拡張子。こちらについては、別記事で紹介する予定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;初めてのコミット。まずはプロジェクトの開始を伝えるコミットからスタート。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial Commit&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-aフラグは、すべての変更に対してコミットするという意味。便利だが、ある理由で1ファイルを修正したのか、そのある理由が複数ファイルに渡る修正なのか、それとも？となってしまうので、コミットの単位については明確な理由がかける範囲で。&lt;br /&gt;
-mフラグは、エディタを開かず、その場でコミットメッセージを書けるようにする。その後’(シングルクォート)か”(ダブルクォート)で囲んだ部分がメッセージになる。日本語でももちろん問題ない。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それではgitの現状を確認してみよう。&lt;code&gt;git status&lt;/code&gt;では、.gitディレクトリに含めれるファイルすべてを密かに監視している。&lt;br /&gt;
ファイルは追加(add)されているか？ コミット済みなのか？　コミットから変更されたか？ 前回のコミットから変更されたか？&lt;br /&gt;
git statusはそれらの状態を教えてくれる便利なコマンドだ。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ファイルに変更を加え、いくつかのコミットを行った後、しばらくすると変更点についてはすっかり忘れている。&lt;br /&gt;
そんな時はコミットメッセージを読めばわかる。(わかるようにコミットメッセージを書くことが大事)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git log --graph --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;oneline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とフラグを渡しつつ、&lt;code&gt;git log&lt;/code&gt;とすると下記のようにコミット1回につき1行で、表示される。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;7366587c589fe6ee60aeff553e899dc13086d7ec About Responsive Web Design is finished
28b07e6c8fa6299c9c6b3321a339b1c7881e2fe4 erase meta since I use .htaccess
90187a85261b208abbb0c52511fcf675ebe4739d fix css little bit
5035c4eabe855efbac15596663190a6126eb0880 Read me was old
4600e678e757950e5d6a7c7fbfc9a6420333e1c2 Ready to deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここでは残念ながら地味な表示だが、Terminal内では、デキる感じがしないでもないように、黒背景にグリーンが映えるマトリックスな世界を繰り広げられる(Terminalの設定による)。&lt;br /&gt;
&lt;a href=&quot;http://www.jukie.net/bart/blog/pimping-out-git-log&quot;&gt;pimping out git log&lt;/a&gt;で紹介されていた&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global alias.lg &lt;span class=&quot;s2&quot;&gt;&amp;quot;log --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit --date=relative&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすると、git logのデフォルトで1行、色つきフォーマットでログを見ることが可能&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gitの真打ち、branch。ブランチは分岐を表示・作成するコマンド。  &lt;/p&gt;

&lt;p&gt;コミットがすべて完了しているmaster(デフォルト)で、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git branch newfeature
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とすると、masterをベースにnewfeatureというブランチが作成される。  &lt;/p&gt;

&lt;p&gt;私は現状、以下のようにブランチモデルを作っている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;master(デフォルト) = 現時点で本番環境を管理するブランチ。ここへのコミットは少ない。gitnのtag機能を使ってバージョンナンバを持っている。&lt;/li&gt;
  &lt;li&gt;develop = 開発バージョン。基本的にすべての作業はこのブランチをメインして行う。ここへのコミットは非常に多い。&lt;/li&gt;
  &lt;li&gt;feature = developとの違いは、開発の中でも特に新しいデザインパターン用のコーディングなどを行う。&lt;/li&gt;
  &lt;li&gt;fix = 文字通り修正用のブランチ。修正が完了次第コミットし、必要に応じてmasterまたはdevelopとマージする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;開発の規模感にもよるが、HTML、CSS、JavaScriptをメインで担当する私にとっては上記のブランチでまかなえる。&lt;br /&gt;
上記のブランチモデルは、&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;A successful Git branching model&lt;/a&gt;を参考に、よりシンプルにしたバージョン。
このブランチの詳しい使い方については、また別の記事としたい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;git merge&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;branchにはmergeは欠かせない。表裏一体の存在といえる。branchを作成し、その場で開発を続けていても、いつかはmasterへマージする日がやってくる。&lt;br /&gt;
マージする際、衝突があればgitはそれを解決しないとマージできないと警告を発する。SmartGitを利用していれば、グラフィカルな環境で衝突している部分を表示してくれる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;をする際には、まず現在いるブランチをコミットして、から&lt;code&gt;git checkout master&lt;/code&gt;というように、マージさせたいブランチに切り替える。&lt;br /&gt;
自分が今いるブランチがどこなのか、ほかにどんなブランチがあるかを確認するには、&lt;code&gt;git branch&lt;/code&gt;とすれば&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;*master
newfeature
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というように表示してくれる。&lt;br /&gt;
ちなみに、Terminal用プログラムBashの設定で&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;parse_git_branch &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git-symbolic-ref HEAD 2&amp;gt; /dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#refs/heads/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\[\033[0;31m\]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\[\033[0;33m\]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\[\033[0;32m\]&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$RED\$(date +%H:%M) \w$YELLOW \$(parse_git_branch)$GREEN\$ &amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上記を追加すると、コマンドプロンプト(コマンドを叩く左側に出る文字列)に、現在のブランチを表示してくれる。
USERディレクトリ下に.bashrcという名前で上記を追加して保存。既存でなければ、ファイル名を.bashrcとし保存すればOK。&lt;/p&gt;

&lt;p&gt;では無事にmasterへブランチを切り替えられただろうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge myfeature&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これで、myfeatureブランチはmasterブランチへマージが完了する。&lt;/p&gt;

&lt;p&gt;ここまでできるようになれば、すっかりGitは使えるようになったといえるはずだ。&lt;br /&gt;
まだまだ奥が深いGitだが、まずは始めること。&lt;br /&gt;
githubの使いこなしや、ブランチモデルのベストプラクティスなどまだまだ楽しいトピックもあるが、今回の記事はここまで。&lt;br /&gt;
Gitについて、もっと知りたいことがあれば、&lt;a href=&quot;http://twitter.com/#!/cssradar&quot;&gt;Twitter@cssradar&lt;/a&gt;にてリクエストしてほしい。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://progit.org/book/ja/&quot;&gt;Pro Git&lt;/a&gt; - オンラインでなら無料で日本語訳されたPro Gitを読むことができる。まだ私自身すべてを読み終えたわけではないが、かなり勉強になる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://help.github.com/git-cheat-sheets/&quot;&gt;Git cheat sheets (github)&lt;/a&gt; - Githubにあるgitのチートシート&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;A successful Git branching model&lt;/a&gt; - ブランチモデルの実例をコマンドともに解説している&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/&quot;&gt;git(1) Manual Page&lt;/a&gt; - gitのマニュアルページ。コマンドのフラグなどはこちら。git helpからコマンドでも参照できる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www8.atwiki.jp/git_jp/pub/git-manual-jp/Documentation/chunked/index.html&quot;&gt;Git ユーザマニュアル (バージョン 1.5.3 以降用)&lt;/a&gt; - 上記リンクの日本語版&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alistapart.com/articles/get-started-with-git/&quot;&gt;Get Started with Git (A List Apart)&lt;/a&gt; - A List ApartにてAl Shaw氏による記事&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gitcasts.com/&quot;&gt;GitCasts&lt;/a&gt; - Gitのスクリーンキャスト。英語だが、グラフィカルな環境でしか覚えられない人には最適&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>レスポンシブウェブデザインについて</title>
   <link href="http://css.studiomohawk.com/css/2011/01/24/about-responsive-web-design/"/>
   <updated>2011-01-24T00:00:00+09:00</updated>
   <id>http://css.studiomohawk.com/css/2011/01/24/about-responsive-web-design</id>
   <content type="html">&lt;p&gt;いまこの記事を読んでいるモニタのサイズは何インチだろうか？&lt;br /&gt;
iPhone、アンドロイドOS搭載スマートフォン、iPad、ネットブック、ノートPC、デスクトップPCと数年前なら思いもよらなかったモニタ/スクリーンサイズでユーザはウェブサイトを閲覧し始めている。
今後もさらに解像度が異なる環境が増えていくことは間違いない。&lt;/p&gt;

&lt;p&gt;ではそのサイズのモニタごとに、スクリーンごとにデザインを作り、HTML/CSSを書き足していくのか？&lt;br /&gt;
その疑問への1つの回答がレスポンシブウェブデザイン(Responsive Web Design)。
多くの場合、CSS3で利用が可能になる予定のMedia Queriesを活用して、モニタ/スクリーンのサイズに合わせて最適なデザインを供給するデザイン/コーディング手法がレスポンシブウェブデザインと呼ばれている。&lt;/p&gt;

&lt;h2&gt;レスポンシブウェブデザインの例&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://colly.com/&quot;&gt;Simon Collison&lt;/a&gt; / Simon Collisonはレスポンシブウェブデザインをいち早く導入したウェブデザイナ&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.informationarchitects.jp/en/&quot;&gt;Information Architects&lt;/a&gt; / WordPressを使ってレスポンシブデザインを実現している&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thinkvitamin.com/&quot;&gt;Think Vitamin&lt;/a&gt; / こちらも最近のリニューアルからレスポンシブウェブデザインを導入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際にサイトを訪れてブラウザのサイズを変更してほしい。サイズに応じてレイアウトが変わっていくのを見てほしい。&lt;/p&gt;

&lt;h2&gt;レスポンシブデザインが解決しないこと&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;レスポンシブウェブデザインは、特にハンドヘルドデバイス用に最適な解決方法と考えられるが、すべての問題に対する解決を提示できるわけではない。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A List Apartの記事、&lt;a href=&quot;http://www.alistapart.com/articles/responsive-web-design/&quot;&gt;Responsive Web Design&lt;/a&gt;にてEthan Marcotteは、次のように書いている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s not to say there isn’t a business case for separate sites geared toward specific devices; 
for example, if the user goals for your mobile site are more limited in scope than its desktop equivalent, then serving different content to each might be the best approach.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ユーザのゴールに合わせて、ハンドヘルドデバイス用にコンテンツを変更することがベストの解決方法である場合もあるということだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://membership.thinkvitamin.com/library/responsive-web-design/mobile/context&quot;&gt;Responsive Web Design: Mobile: Context(Think Vitamin)&lt;/a&gt;にてNick Pettitも、レスポンシブウェブデザインを採用するかについて、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;スピード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハンドヘルドデバイスはWIFIで接続することもあるが、多くの場合は3G回線で接続する。すでに多くのユーザが感じているように、iPhone4のSafariがいくら早くなっても、デスクトップのブラウザのスピードには勝てない。JavaScriptやCSSを無意味にハンドヘルドデバイスでも読み込むことはスピードを犠牲にすることになる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;スクリーンサイズ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;言わずもがな、ハンドヘルドデバイスのスクリーンサイズは決して大きくない。&lt;code&gt;display: none&lt;/code&gt;が解決してくれる問題かもしれないが、実際には難しい場合もある。例えば、レストランの情報をデスクトップからアクセスする場合と、ハンドヘルドデバイスからアクセスする場合とでは、提供すべくコンテンツが異なる。そして画像のサイズについて、iPhone4など解像度の高いスクリーンを持つデバイスも現れはじめており、レスポンシブウェブデザインだけでは解決できない問題もある。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;場所&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハンドヘルドデバイスは持ち運ぶため存在する。スクリーンサイズの差異による問題点と同じく、デスクトップと、ハンドヘルドデバイスではユーザが求めているコンテンツそのものが異なる場合も多い。デスクトップではほとんど役目を果たすことがないGeolocationも、ハンドヘルドには重要になってくる。&lt;/p&gt;

&lt;p&gt;というような観点で検討するべきだと話している。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://5by5.tv/bigwebshow/6&quot;&gt;EPISODE #6: MOBILE FIRST (The Big Web Show)&lt;/a&gt;では、Luke Wroblewskiは「モバイルからまずデザインを始める」という提案をしている。&lt;br /&gt;
こちらも非常に興味深い。現時点では通常デスクトップ用のデザインからスタートし、その後にハンドヘルドデバイス用に最適化していくのが通常のフローと言えるが、Lukeはモバイルデバイス用のデザインを先に行う事で、モバイルで提供すべきサービスの根幹に集中することができ、デザインだけではなく、UIやサイト構造、そしてインタラクションもシンプルにすることができると話している。&lt;br /&gt;
ミニマムなスタート地点からデスクトップ用デザインなど大きなモニタ/スクリーン、マウスやキーボードなどに対応するデザインを作ることで、すべてのユーザに対して最適なデザインを提供できるという考え方だ。&lt;/p&gt;

&lt;h2&gt;Media Queries&lt;/h2&gt;

&lt;p&gt;レスポンシブデザインでは、多くの場合、CSS3でサポートされる予定のMedia Queriesを活用し、サイズの異なるモニタ/スクリーンに対し最適なデザインを提供する。&lt;br /&gt;
Media Queriesについては、&lt;a href=&quot;http://hardboiledwebdesign.com/&quot;&gt;Hardboiled Web Design&lt;/a&gt;の著者であるAndy Clarkの記事&lt;a href=&quot;http://www.stuffandnonsense.co.uk/blog/about/hardboiled_css3_media_queries&quot;&gt;Hardboiled CSS3 Media Queries&lt;/a&gt;で実例を見る事ができる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* iPhone 3 (横向き) ----------- */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;screen&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 	&lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;min-width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;321px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 	&lt;span class=&quot;c&quot;&gt;/* ここにスタイルルール */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;CSS3で拡張されるMedia Queriesでは、&lt;code&gt;screen&lt;/code&gt;や&lt;code&gt;print&lt;/code&gt;のようなメディアタイプだけでなく、デバイス自体のサイズやスクリーンのサイズなどを利用できるようになる。&lt;br /&gt;
例:&lt;code&gt;min-width : 321px&lt;/code&gt;、&lt;code&gt;max-width : 320p&lt;/code&gt;、&lt;code&gt;max-device-width : 1024px&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;上記のように既存のスタイルシートに追記することも可能だし、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smartphone.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;only screen and (min-device-width : 320px) and (max-device-width : 480px)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というように&lt;code&gt;link&lt;/code&gt;を使って別のスタイルシートとして管理することもできる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;smartphone&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.css&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;min-device-width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;320px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-device-width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;480px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;W3Cによれば&lt;code&gt;@import&lt;/code&gt;を使っても上記のように記述することが可能だ。(&lt;a href=&quot;http://www.w3.org/TR/css3-mediaqueries/#media0&quot;&gt;Media Queries&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;現時点でのMedia Queriesのサポート状況は、Firefox, Chrome, Safari, Opera, Internet Explorer 9, Android スマートフォン, そしてiOSデバイス(iPhone、iPhone4、iPad、iPod touch)がサポートしている。(※Androidスマートフォン、iPhone、iPod touchについては、W3Cで宣言されているすべての値を利用できるわけではないようだ)&lt;/p&gt;

&lt;p&gt;Androidスマートフォン、iPhone、iPod touch、iPadなどのハンドヘルド端末については、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width=device-width; initial-scale=1.0; maximum-scale=1.0;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;という記述も必要になるだろう。
&lt;code&gt;meta viewport&lt;/code&gt;については&lt;a href=&quot;http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/UsingtheViewport/UsingtheViewport.html&quot;&gt;Safari Reference Library&lt;/a&gt;(英語)が詳しい説明をしている。&lt;br /&gt;
またはQuirksmodeの&lt;a href=&quot;http://www.quirksmode.org/blog/archives/2010/09/combining_meta.htm&quot;&gt;Combining meta viewport and media queries&lt;/a&gt;(英語)も参考になる。&lt;/p&gt;

&lt;p&gt;また、IE6〜IE8まではCSS3で拡張される予定のMedia Queriesはサポートされていないので、レスポンシブデザインの実装をしないか、&lt;a href=&quot;http://code.google.com/p/css3-mediaqueries-js/&quot;&gt;css3-mediaqueries-js&lt;/a&gt;というJavaScriptを使った実装は可能だ。
レスポンシブウェブデザインは&lt;em&gt;すべてのブラウザで見た目を同じにしなくてはならない&lt;/em&gt;という思想からはほど遠くプログレッシブエンハンスメントという手法に近いので、無理にIE6〜IE8への実装をする必要性はない。&lt;br /&gt;
レスポンシブウェブデザインは、確かにユーザのスクリーンサイズに合わせた最適なデザインを提供することができるが、それができなくてもユーザビリティはマイナスになったりはしない。&lt;/p&gt;

&lt;h2&gt;レスポンシブグリッドCSS&lt;/h2&gt;

&lt;p&gt;レスポンシブグリッドの最大の弱点は、実装がやや大変なこと。現実的にモバイルに最適化されることを想定していないウェブデザインをモバイル用に変更したり、サイズが変わった際にどのようにグリッドが変更していくべきかなど、デザインとテクニックの両面で解決しなければいけない問題点がある。&lt;br /&gt;
そこで現れ始めたのが、レスポンシブウェブデザインのためのグリッドCSSだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://lessframework.com/&quot;&gt;Less Framework3&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;黄金比をベースに3、5、8、13コラム、最小320pxから1280px以上のモニタ/スクリーンに合わせてコラムグリッドの数を変更する。実際に配布されているのは、&lt;code&gt;body&lt;/code&gt;に対してmedea queriesを使って幅のサイズを指定するところのみ。コラムグリッドについては、配布されるファイルのコメントを参考にグリッド用のクラスを作成する。非常にミニマムな構成なので、レスポンシブウェブデザインを学ぶ上でのソースコードリーディングに最適だ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://cssgrid.net/&quot;&gt;The 1140 grid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらは、その名前の通り1140px以上を最大幅とするレスポンシブグリッドCSS。Less Framework3と異なる点はコラムグリッド用のクラスは用意されているところ。そしてコラムグリッドとガター(コラムとコラムの間のマージン)はパーセントで指定されているところ。画像に対しても&lt;code&gt;max-width&lt;/code&gt;を指定し、モニタ/スクリーンのサイズに対して最適なサイズに変更されるようになっていたりする。Photoshopのファイルも配布している。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alistapart.com/articles/responsive-web-design/&quot;&gt;Responsive Web Design (A list Apart)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/css3-mediaqueries/&quot;&gt;Media Queries (W3C)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design/&quot;&gt;Responsive Web Design: What It Is and How To Use It (Smashing Magazine)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css-tricks.com/css-media-queries/&quot;&gt;CSS Media Queries &amp;amp; Using Available Space (CSS-Tricks)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://x7.fi/2010/02/12/how-to-fit-your-website-for-the-apple-ipad/&quot;&gt;How to fit your website for the Apple iPad (x7 Labs)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.quirksmode.org/blog/archives/2010/09/combining_meta.html&quot;&gt;Combining meta viewport and media queries (Quirksmode)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/UsingtheViewport/UsingtheViewport.html&quot;&gt;Configuring the Viewport (Safari Reference Library)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lukew.com/ff/entry.asp?1117&quot;&gt;Mobile First Helps with Big Issues (LukeW)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://5by5.tv/bigwebshow/6&quot;&gt;EPISODE #6: MOBILE FIRST (The Big Web Show)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://membership.thinkvitamin.com/library/responsive-web-design/mobile/context&quot;&gt;Responsive Web Design: Mobile: Context (Think Vitamin)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS RadarをJekyllで作り直し</title>
   <link href="http://css.studiomohawk.com/cssradar/2011/01/23/scratch-and-build/"/>
   <updated>2011-01-23T00:00:00+09:00</updated>
   <id>http://css.studiomohawk.com/cssradar/2011/01/23/scratch-and-build</id>
   <content type="html">&lt;h2&gt;CSS Radarについて&lt;/h2&gt;

&lt;p&gt;ほんの半年ほど前からCSS Radarを再開したものの、目的が記事を書くことに知らない間に置き換わっていた。&lt;br /&gt;
役に立つコンテンツを作れば、ユーザは勝手に増えていく、という幻想を抱くほど私は甘くないが、ユーザを増やすために記事を書くということと、CSS Radarの目的は抜本的に違う。なにより、リアルな現場で働いている人間として、毎日クオリティの高いオリジナルコンテンツを追加できるほど暇ではない。&lt;/p&gt;

&lt;p&gt;だから、少しずつでも確実に自分自身の成長につながる記事を書いていこうと、そういう意思をもって、これまで書いた記事とも決別することにした。&lt;br /&gt;
これまで通り、記事のリクエストは&lt;a href=&quot;http://twitter.com/#!/cssradar&quot;&gt;Twitter@cssradar&lt;/a&gt;にて募集していくし、人気のあった記事はリライトしていく予定だ。&lt;br /&gt;
リクエストがあればその記事を最優先でリライトしていくので、気軽にリクエストしてほしい。&lt;/p&gt;

&lt;h2&gt;WordPressとの決別。Jekyllとの出会い&lt;/h2&gt;

&lt;p&gt;長年愛用してきたWordPressと決別することにした。私にとってWordPressほど優秀なブログツールはおそらくない。それでも新しい環境にチャレンジしていこうということで、&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;を利用し始めた。&lt;/p&gt;

&lt;h3&gt;Jekyllとは？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;元々はgithubのレポジトリ用ページ作成ツール&lt;/li&gt;
  &lt;li&gt;静的ブログエンジン、コマンドラインでブログを生成する&lt;/li&gt;
  &lt;li&gt;非常にシンプルで、静的ブログエンジンとしては強力。WordPressでできたことはできない事が多いが普通のブログには十分&lt;/li&gt;
  &lt;li&gt;記事はmarkdown(ライトウェイトマークアップ言語)を使って記述&lt;/li&gt;
  &lt;li&gt;MacVimで記事を書くことができる&lt;/li&gt;
  &lt;li&gt;記事もソースコードもバージョンコントロールできる = gitを使って、&lt;a href=&quot;https://github.com/studiomohawk&quot;&gt;github&lt;/a&gt;で管理できる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;CSS Radarの今後&lt;/h2&gt;

&lt;p&gt;これまで通りCSSやHTMLについても書いていくが、メインエディタであるVimについて、gitを使ったバージョンコントロール、Macを環境とした開発やデザインに使えるツールの紹介やウェブツールについても書いていく。
これまでは知っていることについて書いていたが、これからは知らないこと、覚えていくことについて書いていくつもりだ。&lt;/p&gt;

&lt;p&gt;知らないことを書いていくので、これまでよりは更新頻度は落ちることになる。&lt;br /&gt;
記事を作成している間は、&lt;a href=&quot;http://pinboard.in/u:studiomohawk&quot;&gt;Pinboard&lt;/a&gt;や&lt;a href=&quot;http://twitter.com/#!/cssradar&quot;&gt;Twitter@cssradar&lt;/a&gt;、そして&lt;a href=&quot;http://www.flickr.com/photos/studiomohawk/&quot;&gt;Flickr&lt;/a&gt;で、私が何をしているかわかるので、ぜひそちらものぞいてみて欲しい。&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
