{
  "name": "grunt-reload",
  "description": "A grunt task that enables live reloading of updated watch files in the browser.",
  "version": "0.2.0",
  "homepage": "https://github.com/webxl/grunt-reload",
  "author": {
    "name": "Matt Motherway",
    "email": "mm@webxl.net",
    "url": "http://webxl.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/webxl/grunt-reload.git"
  },
  "bugs": {
    "url": "https://github.com/webxl/grunt-reload/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/webxl/grunt-reload/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-reload": "bin/grunt-reload"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt": ">=0.3.9",
    "connect": "~2.3.0",
    "buffers": "0.1.1",
    "http-proxy": "0.8.0",
    "websocket": "~1.0.6"
  },
  "devDependencies": {
    "grunt": ">=0.3.9"
  },
  "keywords": [
    "gruntplugin",
    "reload"
  ],
  "readme": "# grunt-reload\n\nA grunt task that enables live reloading of updated watch files in the browser.\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-reload`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-reload');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n\nThis plugin provides two grunt tasks: 'reload' and 'reloadServer'. 'reload' is designed to be called via the watch task configuration. 'reloadServer' is designed to be called on the command-line along with the watch task.\n\nThe reload task tells the page to refresh itself via websocket connection between the reloadServer task and the reloadClient.js that is appended to the requested html file. When the watch task detects a changed file, it will process its configured tasks, which should include the 'reload' task if it is setup like the example below.\n\nConfiguration:\n\n* __port__: (number, default: 8001) Reverse proxy listens on this port. This is necessary for including reload client javascript.\n* __proxy__: (object, optional) If present, this config object will enable a reverse proxy to your development server's content\n  * __host__: (string, default: 'localhost') development server hostname\n  * __port__: (number, default: server.port or 80) development server port\n  * __includeReloadScript__: (boolean, default: true) includes the client js to listen for reload commands\n* __iframe__: (object, optional)\n  * __target__: (string) URL of development server\n* __liveReload__: (boolean, only required for LiveReload 2.x)\n\n## Reload methods\n\n__Proxy__\n\nThis will automatically append the script to the requested HTML file. Here's how you would use grunt-reload with [grunt-less](https://github.com/jharding/grunt-less):\n\n```javascript\n// project configuration\ngrunt.initConfig({\n    lint: {\n        all:['js/*.js']\n    },\n    reload: {\n        port: 6001,\n        proxy: {\n            host: 'localhost'\n        }\n    },\n    watch:{\n        files:['index.html', 'style.less'],\n        tasks:'default reload'\n    }\n\n});\n\ngrunt.loadNpmTasks('grunt-less');\ngrunt.loadNpmTasks('grunt-reload');\n\ngrunt.registerTask('default', 'lint less');\n```\n\n__IFrame__\n\nUse this method if you don't want to muck around with your server's response.\n\n```javascript\n...\n    iframe: {\n        target: 'http://localhost:9999'\n    }\n...\n```\n\nYour iframe'd dev site in this instance would be available at the default http://localhost:8001\n\n__LiveReload extension__\n\nThis is useful if you want to reload CSS files in place in addition to the entire page when files change. It requires a [LiveReload extension](http://help.livereload.com/kb/general-use/browser-extensions). In-line reloading of CSS requires [grunt 4.0](https://github.com/cowboy/grunt/tree/wip).\n\nSet the reload server to listen on LiveReload's default port:\n\n```javascript\n...\n    port: 35729, // LR default\n    liveReload: {}\n...\n```\n\nMake sure you enable LR in your browser (click the LR button in Chrome)\n\n__Manual include__\n\nIf you prefer hard-coding over proxies, extensions, and iframes, you can just do this:\n\n```html\n<script>\n    __reloadServerUrl=\"ws://localhost:8001\";\n</script>\n<script type=\"text/javascript\" src=\"//localhost:8001/__reload/client.js\"></script>\n```\n\nThis makes the reload client work from any address.\n\n## Usage\n\n`grunt reload watch`\n\nIf you want to run a static server using the bundled server task, and enable reloading, you can configure something like this:\n\n```javascript\n...\n    reload: {\n        port: 6001,\n        proxy: {\n            host: 'localhost',\n            port: 8000 // should match server.port config\n        }\n    },\n    watch:{\n        files:['index.html', 'style.less'],\n        tasks:'lint less reload'\n    }\n...\ngrunt.registerTask('default', 'server reload watch');\n```\n\nThen just run:\n\n`grunt`\n\n\n## TODO\n* ~~reload resources without refreshing entire page~~ use [LiveReload extensions](http://help.livereload.com/kb/general-use/browser-extensions) and grunt 4.x alpha\n* ~~add option to run standalone web server for project~~ use server task for now\n* write chrome extension to reload resources (css, images, templates)\n    * the includeReloadScript & proxy options will probably become the fallback method of attaching the client\n    * may allow one of three attach methods: extension, iframe, or proxy\n\n## Release History\n*   __06/15/2012 - 0.2.0__: Added support for grunt 4.0, [LiveReload extensions](http://help.livereload.com/kb/general-use/browser-extensions), iframes, and custom targets\n*   __06/04/2012 - 0.1.2__: Removed connect 1.x requirement (no longer using connect.router). Added test. Clean up.\n*   __06/03/2012 - 0.1.1__: Fixes 'socket hang up' error.\n*   __05/27/2012 - 0.1.0__: Initial release.\n\n## License\nCopyright (c) 2012 webxl  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-reload@0.2.0",
  "_from": "grunt-reload@~0.2.0"
}
