{
  "name": "grunt-s3",
  "description": "A grunt task to automate moving files to/from Amazon S3.",
  "version": "0.0.8",
  "author": {
    "name": "Aaron Forsander",
    "url": "https://github.com/pifantastic"
  },
  "homepage": "https://github.com/pifantastic/grunt-s3",
  "repository": {
    "type": "git",
    "url": "git://github.com/pifantastic/grunt-s3.git"
  },
  "bugs": {
    "url": "https://github.com/pifantastic/grunt-s3/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pifantastic/grunt-s3/blob/master/LICENSE"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-s3": "bin/grunt-s3"
  },
  "scripts": {
    "test": "grunt test"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "keywords": [
    "gruntplugin",
    "amazon",
    "s3"
  ],
  "dependencies": {
    "grunt": "~0.3.9",
    "async": "~0.1.18",
    "underscore": "~1.3.3",
    "underscore.deferred": "~0.1.4",
    "knox": "0.0.9",
    "mime": "~1.2.5"
  },
  "devDependencies": {},
  "readme": "# Grunt + Amazon S3\n\n## About\n\nAmazon S3 is a great tool for storing/serving data. Thus, there is a chance it is part of your build\nprocess. This task can help you automate uploading/downloading files to/from Amazon S3. All file\ntransfers are verified and will produce errors if incomplete.\n\n## Dependencies\n\n* knox\n* mime\n* async\n* underscore\n* underscore.deferred\n\n## Installation\n\n1. `npm install grunt-s3`\n2. Add `grunt.loadNpmTasks('grunt-s3');` to your project's `grunt.js` file.\n\n## Configuration\n\n* **key** - (*string*) An Amazon S3 credentials key\n* **secret** - (*string*) An Amazon S3 credentials secret\n* **bucket** - (*string*) An Amazon S3 bucket\n* **headers** - (*object*) An object containing any headers you would like to send along with the\ntransfers i.e. `{ 'X-Awesomeness': 'Out-Of-This-World', 'X-Stuff': 'And Things!' }`\n* **access** - (*string*) A specific Amazon S3 ACL. Available values: `private`, `public-read`, `\npublic-read-write`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`\n* **gzip** - (*boolean*) If true, uploads will be gzip-encoded.\n* **upload** - (*array*) An array of objects, each object representing a file upload and containing a `src`\nand a `dest`. Any of the above values may also be overriden.\n* **download** - (*array*) An array of objects, each object representing a file download and containing a\n`src` and a `dest`. Any of the above values may also be overriden.\n* **del** - (*array*) An array of objects, each object containing a `src` to delete from s3. Any of\nthe above values may also be overriden.\n\n### Example\n\n```javascript\ngrunt.initConfig({\n\n  s3: {\n    key: 'YOUR KEY',\n    secret: 'YOUR SECRET',\n    bucket: 'my-bucket',\n    access: 'public-read',\n\n    // Files to be uploaded.\n    upload: [\n      {\n        src: 'important_document.txt',\n        dest: 'documents/important.txt',\n        gzip: true\n      },\n      {\n        src: 'passwords.txt',\n        dest: 'documents/ignore.txt',\n\n        // These values will override the above settings.\n        bucket: 'some-specific-bucket',\n        access: 'authenticated-read'\n      },\n      {\n        // Wildcards are valid *for uploads only* until I figure out a good implementation\n        // for downloads.\n        src: 'documents/*.txt',\n\n        // But if you use wildcards, make sure your destination is a directory.\n        dest: 'documents/'\n      }\n    ],\n\n    // Files to be downloaded.\n    download: [\n      {\n        src: 'documents/important.txt',\n        dest: 'important_document_download.txt'\n      },\n      {\n        src: 'garbage/IGNORE.txt',\n        dest: 'passwords_download.txt'\n      }\n    ],\n\n    del: [\n      {\n        src: 'documents/launch_codes.txt'\n      },\n      {\n        src: 'documents/backup_plan.txt'\n      }\n    ]\n  }\n\n});\n```\n\nRunning `grunt s3` using the above config produces the following output:\n\n    $ grunt s3\n    Running \"s3\" task\n    >> ↙ Downloaded: documents/important.txt (e704f1f4bec2d17f09a0e08fecc6cada)\n    >> ↙ Downloaded: garbage/IGNORE.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ↗ Uploaded: documents/document1.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ↗ Uploaded: passwords.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ↗ Uploaded: important_document.txt (e704f1f4bec2d17f09a0e08fecc6cada)\n    >> ↗ Uploaded: documents/document2.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ✗ Deleted: documents/launch_codes.txt\n    >> ✗ Deleted: documents/backup_plan.txt\n    Done, without errors.\n\n### Alternative ways of including your s3 configuration\n\n#### Grunt template strings\n\n(Special thanks to @nanek)\n\nTemplate strings in grunt will allow you to easily include values from other files. The below example\ndemonstrates loading aws settings from another file.\n\n```javascript\ngrunt.initConfig({\n  aws: '<json:grunt-aws.json>',\n  s3: {\n    key: '<%= aws.key %>',\n    secret: '<%= aws.secret %>',\n    bucket: '<%= aws.bucket %>',\n    access: 'public-read'\n  }\n}\n```\n\nWhere grunt-aws.json is just a json key:value file like package.json.\n\n#### Environment variables\n\nIf you do not pass in a **key** and **secret** with your config, `grunt-s3` will fallback to the following\nenvironment variables:\n\n* `AWS_ACCESS_KEY_ID`\n* `AWS_SECRET_ACCESS_KEY`\n\n## Helpers\n\n### grunt.helper('s3.put', src, dest, options)\n\nUpload a file to s3. Returns a Promises/J-style Deferred object.\n\n**src** (required) - The path to the file to be uploaded. Accepts wildcards, i.e. `files/*.txt`\n\n**dest** (required) - The path on s3 where the file will be uploaded, relative to the bucket. If you use a\nwildcard for **src**, this should be a directory.\n\n**options** (optional) - An object containing any of the following values. These values override\nany values specified in the main config.\n\n* **key** - An Amazon S3 credentials key\n* **secret** - An Amazon S3 credentials secret\n* **bucket** - An Amazon S3 bucket\n* **headers** - An object containing any headers you would like to send along with the upload.\n* **access** - A specific Amazon S3 ACL. Available values: `private`, `public-read`, `public-read-write`,\n`authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`\n* **gzip** - (*boolean*) If true, uploads will be gzip-encoded.\n\n### grunt.helper('s3.pull', src, dest, options)\n\nDownload a file from s3. Returns a Promises/J-style Deferred object.\n\n**src** (required) - The path on S3 from which the file will be downloaded, relative to the bucket. **Does not accept wildcards**\n\n**dest** (required) - The local path where the file will be saved.\n\n**options** (optional) - An object containing any of the following values. These values override\nany values specified in the main config.\n\n* **key** - An Amazon S3 credentials key\n* **secret** - An Amazon S3 credentials secret\n* **bucket** - An Amazon S3 bucket\n* **headers** - An object containing any headers you would like to send along with the upload.\n\n### grunt.helper('s3.delete', src, options)\n\nDelete a file from s3. Returns a Promises/J-style Deferred object.\n\n**src** (required) - The path on S3 of the file to delete, relative to the bucket. **Does not accept wildcards**\n\n**options** (optional) - An object containing any of the following values. These values override\nany values specified in the main config.\n\n* **key** - An Amazon S3 credentials key\n* **secret** - An Amazon S3 credentials secret\n* **bucket** - An Amazon S3 bucket\n* **headers** - An object containing any headers you would like to send along with the upload.\n\n### Examples\n\n```javascript\nvar upload = grunt.helper('s3.put', 'dist/my-app-1.0.0.tar.gz', 'archive/my-app-1.0.0.tar.gz');\n\nupload\n  .done(function(msg) {\n    console.log(msg);\n  })\n  .fail(function(err) {\n    console.log(err);\n  })\n  .always(function() {\n    console.log('dance!');\n  });\n\nvar download = grunt.helper('s3.pull', 'dist/my-app-0.9.9.tar.gz', 'local/my-app-0.9.9.tar.gz');\n\ndownload.done(function() {\n  grunt.helper('s3.delete', 'dist/my-app-0.9.9.tar.gz');\n});\n\n```\n\n## Changelog\n\n#### v0.0.6\n\n* Bump version of `underscore.deferred` to `0.1.4`. Version `0.1.3` would fail to install sometimes\ndue to there being two versions of the module with different capitalizations in npm.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-s3@0.0.8",
  "_from": "grunt-s3@~0.0.8"
}
