---
layout: post
title: コマンドライン
category: commandline
date: 2011-02-13 00:00:00
tldr: "巷では黒い画面と畏れを込めて呼ばれているコマンドライン達。実際に使ってみるとそんなに怖いことはない。GUIには追いつけないコマンドラインのスピード感を少しずつ覚えていけばいつしかいつも黒い画面を開いているはず。画面も黒から好きなカスタマイズもできるので、もうこれで怖くない。"
toc:
- {text: コマンドラインについて, hash: whatis}
- {text: まずは見た目からカスタマイズ, hash: custom}
- {text: ターミナルの使い方, hash: howto}
- {text: パッケージマネジャ, hash: package}
- {text: ターミナルの世界へようこそ, hash: conclusion}
---

## コマンドラインについて {#whatis}

Terminal.appは怖い。  
GUIでなんだって出来る時代にパソコンに出会った私にとっても、それは変わらない。  
Macをメインで使い始める前、たっぷり3年以上もUbuntuというLinuxディストリビューションをメインで使っていた私でも、Terminalで何かをしなければならない時しか開くことはなかった。  

MacVimをメインのエディタにしてから3ヶ月ほど、年明けから[Jekyll](https://github.com/mojombo/jekyll)を使ってブログを作成しはじめた。Rubyを覚えてみようと今年から勉強中。  
自分自身考えてもいなかったが、それらすべてがターミナルの便利さを教えてくれた。  

- MacVimでは、もちろんコマンドを実行できるが、コマンドそのものとは関係なく、インサートモードとノーマルモードの切り替えというメンタリティはGUIとCUIのメンタリティと似てる。それに覚えるのに時間はかかるかもしれないが、一旦覚えてしまうともう戻れない中毒性に近い利便性を手に入れる楽しみも覚えられた。
- Jekyllはターミナルを使わなければブログの更新すら出来なくなる。基本的なコマンドはJekyllを使ううちに覚えてしまった。  
- Rubyはirbで実際にRubyを使って気楽に自分の書いたコードをテストしたりするのにターミナルを利用している。

ソースコードリーディングのテキストとしてお気に入りのHTML5 Boilerplateで、[Build
Script](https://github.com/paulirish/html5-boilerplate/wiki/Build-script)が追加され、フロントエンドデベロッパの間でも、自前のオートメーションを作ることが当たり前になってきそうな流れもある。
そんなタイミングだからこそ、ターミナルを使いこなせる人になろうと、こんな時代に提言したい。

私のように家ではMacで会社ではWindowsという人も多いだろう、今回はMacについての紹介になるがきっかけさえつかんでしまえばどうにかなる。ちなみに私はWindowsでは[Cygwin](http://www.cygwin.com/)を[Console](http://sourceforge.net/projects/console/)から利用している。

## まずは見た目からカスタマイズ {#custom}

私はGUIアプリでも、たとえそれがいかに便利でも見た目が悪いと長続きしないタチ。本末転倒かもしれないがそんな性格がウェブデザイナとしての自分を支えていると思い込んでいる。  
だからこそターミナルにも見た目を要求したい。

- [Visor](http://visor.binaryage.com/)

  Visorはターミナルをショートカットキーで呼び出すことが出来るTerminal.appのヘルパ。**control+control**で画面の1/3ほどのターミナル画面がスライドしてくる便利でかつ、おしゃれなツール。  
  Macでは[iTerm2](http://sites.google.com/site/iterm2home/)というターミナル互換アプリも人気があるようで、こちらはVisorとは連動できないが、同じようにショートカットキーで呼び出すことができるオプションがある。

- [.bashrc](https://gist.github.com/824504)(リンク先は私が利用している.bashrcファイルの一部)

  デフォルトでTerminalを開くと黒い背景に白い文字。あまりにも地味なので私はもう少しだけカラフルにしている。  
  そのついでに[Git](/tool/2011/01/29/git-version-control/)をターミナルで使いやすくなるようにブランチ名や変更を知らせてくれるマークもカラーをつけて表示している。

ちょっとカスタマイズしてあげるだけで気持ちよく利用することができる。  

### Mac OSXでターミナルにgitのブランチ名を表示する方法

少し話から外れるがせっかくなのでその方法を紹介しよう。  
まずはgitのオートコンプリーションを探してみよう。  

``/usr/local/git/contrib/completion/git-completion.bash``

通常であれば、上記のようなファイルがあるはずだ。もしなければ、[こちら](https://github.com/git/git/tree/master/contrib/completion)にファイルがあるので、``/usr/local/git/contrib/completion/``というディレクトリに``git-completion.bash``という名前で保存してほしい。

そして次は.bashrc。  
MacVimを利用している人なら見覚えがある.(ドット)ファイル。.bashrcはTerminalの中で働いているBashの設定ファイル。

[gist](https://gist.github.com/824504)にも置いてあるが

{% highlight bash %}
# git settings
source /usr/local/git/contrib/completion/git-completion.bash
GIT_PS1_SHOWDIRTYSTATE=true
export PS1='\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\w\[\033[31m\]$(__git_ps1)\[\033[00m\]\$ '
{% endhighlight %}

Git用のカスタマイズは上記の部分。こちらだけでも.bashrcファイルの最後の方に追加しておけば設定終了。  
もし.bashrcファイルが見当たらないようであれば、

{% highlight bash %}
touch ~/.bashrc
open ~/.bashrc
{% endhighlight %}

として、開いたエディタに上記のスニペットを追加すればOK。

{% highlight bash %}
source ~/.bashrc
{% endhighlight %}

保存したら、上記のコマンドで変更を反映できる。

## ターミナルの使い方 {#howto}

私自身もまだまだ基本的なコマンドしかソラでは実行できない。必要に応じてコマンドは覚えていけばいいので、自分のペースで続けていってほしい。  
まずはターミナルで使える便利なショートカットキーを、そして実際にいくつかコマンドを見ていこう。

### ショートカットキー

- **control + A** / 現在のラインの一番始めに移動
- **control + H** / 現在のラインの一番最後に移動
- **control + U** / 
  現在位置より手前のラインを削除。ラインの一番最後の場合はラインを削除になる。間違ってオートコンプリートしてしまったときや癖で上カーセルを叩いてしまった場合に便利
- **control + C** / 現在動作しているプロセスを終了する
- **command + T** / 新しくタブを作る。
- **Tab** / 
  ファイル名やディレクトリ名をオートコンプリートしてくれる。先ほど設定したgitのオートコンプリートも同じキーでOK
- **上カーソル** / ターミナルのヒストリを呼び出してくれる。

ほかにもまだまだショートカットキーはあるが、私が普段使い出来るショートカットはこんな感じだ。

### コマンド

- **cd** 
  
  Change Directoryの略。``cd DIR_NAME``のように、移動したいディレクトリ名を入力する。  
  ``Tab``を使ってオートコンプリートできるし。``cd DIR_NAME/CHILD_DIR_NAME``というようにさらに深い階層へもいける、/の後も数文字タイプしたらきちんとオートコンプリートしてくれる。  
  ``cd ..``とすれば親ディレクトリに移動、``cd ~``とすればルートディレクトリに移動となる。

- **pwd** / 現在のディレクトリを表示してくれる。ふと迷子になりがちなので便利
- **ls**
  
  ディレクトリ内のファイル、ディレクトリを表示するコマンド。  
  ``ls DIR_NAME``とすれば、DIR_NAMEの中のファイル、ディレクトリを表示。  
  ``ls -l``とすると、ファイル、ディレクトリの詳細の情報つきでリスト表示。

- **touch** / ファイルを作成するコマンド。``touch style.css``とすれば現在のディレクトリにstyle.cssを生成してくれる。
- **open** / こちらはファイルやディレクトリを関連づけしてあるアプリで開いてくれるコマンド。
- **mkdir** / ディレクトリを生成するコマンド。``mkdir DIR_NAME``でDIR_NAMEというディレクトリを作成できる。

まだまだたくさんのコマンドがあるが、私が安心して利用できる基本コマンドはこれくらいだ。ファイルをコピーしたり、削除したりするコマンドは不安が残るので少し慣れたら使い始めるといいだろう。  
とりあえずのところは、``open DIR_NAME``としてFinderを立ち上げてコピーや削除をすれば問題ない。

## パッケージマネジャ {#package}

Bashだけでももちろん協力なツールではあるがせっかくだからもっとたくさん機能を追加してみたい。  
RubyやPython、Javaなどコマンドラインでも使える強力なツールがあるがこれらのツールを管理するのはとても大変。そのために**パッケージマネジャ**が必要になってくる。

Macにはデフォルトで使えるパッケージマネジャはインストールされていない。MacPortやFink、そして今回紹介するHomebrewがMacではデファクトとされている。

[Homebrew](http://mxcl.github.com/homebrew/)はシンプルで強力な新しい世代のパッケージマネジャ。非常に簡単にインストールできるし利用も簡単なので、初心者にはもってこいのパッケージマネジャ。  
私はHomebrewでgitをインストールし直した。こちらのほうがアップデートが簡単にできるということで。

### Homebrewのインストール

1. [xcodeをインストール](http://developer.apple.com/technologies/xcode.html)、Macで開発するのに当たって絶対に必要になってくるのでxcodeをインストール。Homebrewでも使う。

2. ``ruby -e "$(curl -fsSLk https://gist.github.com/raw/323731/install_homebrew.rb)"``

以上でインストールが完了する。  
早速インストールが終わっているか確認してみよう。

``brew --version``

0.7.1らしいバージョンナンバが表示されれば問題ない。  
それでは早速ツールをインストールしてみよう。

``brew install curl``

curlはさまざまなプロトコルを用いてデータを転送するライブラリ。(by [Wikipedia
cURL](http://ja.wikipedia.org/wiki/CURL))

``brew search``とすればインストールできるツールの一覧を表示。``brew list``とするとインストールされているツールの一覧を表示。

英語ではあるがbrewのコマンドは[こちら](https://github.com/mxcl/homebrew/wiki/The-brew-command)

## ターミナルの世界へようこそ {#conclusion}

ここまでできたらすっかりコマンド使いっぽく見える。コマンドラインになれてきたら次のステップはオートメーション。  
私はRubyのRakeを使っていろいろなタスクを自動化しはじめている。  
興味があれば、まずはHTML5 Boilerplateの[Build Script](https://github.com/paulirish/html5-boilerplate/wiki/Build-script)について調べてみるといいだろう。  
現時点ではHTMLを圧縮したり、CSSをコンバインして圧縮したり、Jpeg、PNGのファイルサイズを最適化したりと実に様々なフロントエンドなタスクを自動化している。HTML5 Boilerplateではantというビルドツールを活用している。  

Rubyでは[CSS Spriteを自動化](https://github.com/flyerhzm/css_sprite)したりすることもできるようなのであの30分はかかりそうな面倒なspriteも自動で行うことができるわけだ。

どこかの本で読んだことの受け売りだが60分かかるタスクがあるとしたら、59分かけてそのタスクを行うスクリプトを書いて、1分で実行する。これからのウェブデザイン/フロントエンドデベロッパにはそんな心構えが必要になってくるだろう。
