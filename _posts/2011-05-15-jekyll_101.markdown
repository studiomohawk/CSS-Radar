---
layout: post
category: frontend
title: Jekyllを使ったブログ構築について
date: 2011-05-14 11:07:36
published: false
---

何度目かのリニューアルで、CSS Radarは[Jekyll](https://github.com/mojombo/jekyll)を利用し始めている。([CSS RadarをJekyllで作り直し](http://css.studiomohawk.com/cssradar/2011/01/23/scratch-and-build/)参照)  
JekyllはRubyで作成された静的サイトジェネレータ、ブログ風味というジャンルのツールであることは前にも触れた。  
使い始めたころは、せっかく慣れたWordPressとの差異に戸惑ったが、5ヶ月を迎える今となっては、色々なワザを覚えWordPressよりも簡単にブログを更新できるようになった。  
今回はJekyllの利点、欠点、インストール方法などを簡単に紹介する。  
Jekyllについてもっと詳しく知りたいというユーザがいれば、もっと詳しく解説するつもりなので、メールか[Twitter@cssradar](http://twitter.com/#!/cssradar)にてリクエストしてほしい。

## Jekyllの利点

- **レスポンス速度が早い**

Jekyllではコンテンツを事前に静的なファイルとして生成しているため、DBへのアクセスも、RubyやPHPのレスポンスを待つ必要はない。  
WordPressではたとえキャッシュプラグインを利用していても、どこかのタイミングで動的なファイル生成を行っているわけだから、Jekyllで生成したブログはその部分において絶対的に有利。

- **セキュリティの心配が少ない**

ごく単純なHTML/CSS/JSで構成されたサイトへの攻撃はなかなか難しい。  
この手の話にはまったく詳しくないが、脆弱性は往々にして動的に生成されるファイル達に存在しているはず。

- **サーバ側の設定も最低限で十分**

ウェブサイトが存在し始めたころと全く変わらないシンプルなサイトになるので、サーバ側でRuby/PHP/Pythonに対応していない、あるいは、apacheモジュールのあれがない、phpのあのスクリプトがない、ということはない。  
ウェブサーバさえあればJekyllブログは動作する。Amazon
S3でも静的HTMLファイルの表示に対応したから、Amazon S3にホストすることもできる。

- **お気に入りのエディタで記事を作成できる**

Jekyllでは、markdownか、textileというライトウェイトマークアップ言語を使って記事を生成する。  
ウェブインターフェイスはどれだけがんばっても使い慣れたエディタには叶わない。

## Jekyllの欠点

- **コメントシステムはネイティブでは無理**

WordPressのように自前でコメントシステムを持つことができない。  
私のように、コメントシステムがイマイチであることを認めてメールによるコミュニケーションに移行することはマイノリティの解決策だろうが、
[Disqus](http://disqus.com/)のような、サードパーティのコメントシステムを利用すれば解決はできる。

- **検索システムもネイティブでは無理**

私はWordPressの自前の検索エンジンを利用したことはないが、自前でできるできないという点ではJekyllではできないので欠点に上げた。
Google Custom Searchなどを利用すれば解決できる。

- **サイト生成は毎回全部を書き出す必要がある**

また100件にも満たない(どころかこれで11記事目)ので、その欠点にはたどり着かないが、1000件もの記事があったとしたら、それなりにJekyllは生成するのに時間はかかるだろう。  
とはいえ、サーバサイドの処理ではなく、近年の早すぎるとも言える端末ではそれほど問題ないのではないかと思われる。

## Jekyllの使い方

### 依存

- **Ruby**

RubyはMac OS
Xにデフォルトでインストールされているが、最新版ではないので、最新版をインストール方法は、  
[こちらから](/tool/2011/05/14/ruby_for_designer_frontend_dev/)。

- **Jekyll**

次はJekyllのインストール。こちらは、gemを利用してインストールするので、

{% highlight sh %}
gem install jekyll
{% endhighlight %}

*エラーが出るようなら、`sudo gem install jekyll`としよう。

{% highlight sh %}
jekyll -v
{% endhighlight %}

としてインストールを確認しよう。ちなみに、インストールしたバージョンを教えてくれるのが`-v`オプション。現時点では、0.10.0なので、そんな記述が戻ってくれば成功。

### Jekyllの基本構造

{% highlight sh %}
.
|-- _config.yml
|-- _layouts
|   |-- default.html
|   `-- post.html
|-- _posts
|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile
|   `-- 2009-04-26-barcamp-boston-4-roundup.textile
|-- _site
`-- index.html

# from https://github.com/mojombo/jekyll/wiki/usage
{% endhighlight %}

**\_config.yml**

こちらが設定ファイル。詳しい設定は[こちらから](https://github.com/mojombo/jekyll/wiki/configuration)  
YAMLという形式で書かれていて、デフォルト以外の設定も追加し、テンプレート内で利用できるので、サイト全体で利用する設定などをここでしておくと非常に便利。

**\_layouts**

このディレクトリ内はテンプレートファイルが格納される。  
どのテンプレートを利用するかは、各ファイルのYAML front
matterの設定で変更することができる。  
Jekyllでは、Liquidというテンプレートエンジンを利用している、Liquidについては[こちら](https://github.com/mojombo/jekyll/wiki/liquid-extensions)

**\_posts**

ここが記事ファイル置き場。
`YEAR-MONTH-DATE-title.MARKUP`という命名規則に従って記事ファイルを作成していく。  
例えばこの記事なら、`2011-05-15-jekyll_101.markdown`というファイル名になる。
このファイル名がデフォルトではURLになる。

**\_site**

このディレクトリに生成された静的ファイルが格納されていく。

### Jekyllはシンプル

最低限のセットアップはこれで終わりだ。  
WordPressのテーマ作りでもそうだが、この手のツールの使い方は実際に動作しているサイトのソースを見るのが一番勉強になる。
私が作成した[the_minimum](https://github.com/studiomohawk/jekyll-theme-the_minimum)や、このサイトの[ソース](https://github.com/studiomohawk/CSS-Radar)を参照してほしい。  

次のステップはファイルの生成

基本ストラクチャを作成したら(あるいは面倒だから、私の(テーマファイル)[https://github.com/studiomohawk/jekyll-theme-the_minimum]をダウンロードしたら)、ターミナルにて、そのフォルダに移動してほしい。  

{% highlight sh %}
jekyll
{% endhighlight %}

とすれば、あとは自動でHTMLを作成してくれる。

{% highlight sh %}
jekyll --server # とすれば、http://localhost:4000/にてブラウザで確認できる
jekyll --server --auto #とすると、ファイルの保存の度にHTMLファイルの生成を自動で行ってくれる
{% endhighlight %}

もう少し細かい説明も今後記事を作成するが、質問があれば是非。

### Jekyllは強力

使い方を覚えてしまえば非常に便利なJekyllを使って、ブログ以外にもプレゼンテーションや、プロトタイプの作成、ドキュメントの管理なども簡単に行うこともできる。  
ブログは慣れたWordPressでやりたいという人にでも必ず便利な使い道があるはずなので、挑戦してみてほしい。  
Jekyllはまだまだ0.10.0という新しいプロジェクトなので、日本語のヘルプなどは存在しない。なので、質問などあればいつでもメールにて。
