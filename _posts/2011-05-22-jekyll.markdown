---
layout: post
category: jekyll
title: "Jekyll"
date: 2011-06-11 13:39:28
tldr: "ハッカーのためのブログツール。静的ファイル生成ツールであるJekyllを使う上で知っておきたいすべてについて。インストールからサーバへのアップロード、そして自動化の方法も紹介しているのでこれを機会にぜひ自分のブログを作ろう。"
---

## Jekyllとは {#whatis}

Amazon S3にて静的ファイルによるウェブサイトを構築できるようになり、Amazon Web Serviceが日本リージョンを追加したことで、これからJekyllのような静的ファイルジェネレータを使ったブログが日本でも増えるのではないか。  

Jekyllといえば、このCSS Radarも今年1月からwordpressを離れ、Jekyllを使ってブログを構築している。  
(残念ながらまだAmazon S3でのホストはしていない)  

Amazon Web Service勉強会でもJekyllとAmazon S3についての発表があった。([usteam](http://www.ustream.tv/recorded/14269210))  
そこで、今回はRubyでもコマンドラインでも初心者である私でもつくれるようになったJekyllについて紹介しよう。

## 開発環境の準備 {#prepare}

JekyllはRubyで作成されているので当然ながらRubyが必要。  
Rubyの導入については、[ウェブデザイナのためのRuby](http://css.studiomohawk.com/tool/2011/05/14/ruby_for_designer_frontend_dev/)を参考にしてほしい。

Rubyの準備ができたら、

{% highlight sh %}
gem install jekyll
{% endhighlight %}

\*パーミッションがどうのというエラーがでたら、``sudo gem install jekyll``とすればインストールできるはず。

CSS RadarではHTMLやら、CSSなどのソースコードの表示もあるので、Pygmentsを使ってシンタックスハイライトを行っている。  
Homebrewを使っているならインストールは簡単。

{% highlight sh %}
brew install pip && pip install pygments
{% endhighlight %}

としてから、Homebrewでは実行ファイルにsymlinkがつかないそうで下記を実行してsymlinkをつくる

{% highlight sh %}
ln -s /usr/local/Cellar/python/2.7/bin/pygmentize /usr/local/bin/pygmentize
{% endhighlight %}

## 基本フォルダ/ファイル構造と記事の作成 {#structire}

### 基本フォルダとファイルの準備

{% highlight sh %}
.  
|-- _config.yml (設定ファイル)  
|-- _layouts (テンプレートフォルダ)  
|   |-- default.html  
|   -- post.html  
|-- _posts (記事フォルダ、.textileか.markdownで記述)  
|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile  
|   -- 2009-04-26-barcamp-boston-4-roundup.textile  
|-- _site (HTML生成先フォルダ)  
-- index.html
{% endhighlight %}

アンダーバーから始まる、``_layouts``、``_posts``、``_site``の3つのフォルダが必須のフォルダになる。  
手前から、テンプレート保管、記事、生成先フォルダという役割がある。  
``_config.yml``はサイト全体に影響する設定ファイル。

必須になるのはたったこれだけというシンプル設計もJekyllの魅力の1つ。

### 記事の作成

Jekyllでは、記事の作成は.markdownまたは.textileという軽量マークアップ言語の文法で記述されたプレーンテキストファイルで行う。  
``$YEAR-$MONTH-$DATE-$TITLE.$FORMAT``という形式で、\_postsフォルダに格納されたファイルをJekyllがプロセスしてくれる。  

例えば、2011年5月14日に作成したウェブデザイナのためのRuby入門という記事なら、``2011-05-22-ruby-for-designer.markdown``というファイル名になる。  
URLに入るタイトル名はアルファベットにしておいた方が無難だろう。2バイト文字を利用できるかは試してみた事はない。

{% highlight ruby %}
---
layout: post
category: tool 
title: Jekyllを使ってブログをつくろう
date: 2011-06-11 13:39:28
---
{% endhighlight %}

記事のファイルの先頭にはYAML front matterと呼ばれる設定部分が必要になる。  
今回の記事のYAML front matterが上記。  
layoutでは、\_layoutsに作成したテンプレート定義ファイルを設定し、  
categoryにはカテゴリ、titleにはもちろんタイトル、そしてdateには更新日を記述することができる。  
ここで必須になるのは、layoutとtitleの2ヶ所のみとなり、YAML front matterで設定した項目は、記事であればその記事内のテンプレート定義ファイル内の変数として利用することが可能。

## テンプレートの作成 {#template}

それではテンプレートの作成について見てみよう。

テンプレート定義ファイルは何の変哲もないHTMLで記述される。例外は記事ファイル内のYAML front matterに記述するlayoutの部分で利用するテンプレート名をこちらも同じく、

{% highlight ruby %}
---
layout: post
---
{% endhighlight %}

というようにYAML front matterとして記述するという点と、後述するLiquidというテンプレートエンジンを利用して記事部分のレンダリングなどを行ったりするという点が異なる。　　

wordpressでもそうだが、この手のテンプレファイル系は実際にファイル自体を見た方が早い。  
私が公開しているJekyll用テーマファイル、[the_minimumの記事用レイアウトファイル](https://github.com/studiomohawk/jekyll-theme-the_minimum/blob/master/_layouts/post.html)を見ながら、
次項を読んでほしい。

## Liquidについて {#liquid}

Liquidは非常にシンプルなテンプレートエンジンで、これまでwordpressに慣れてきた場合は少し物足りなく感じるかもしれないがその代わり覚えるのは簡単。
Liquidで利用できるタグについては[こちら](https://github.com/tobi/liquid/wiki/liquid-for-designers)を参考に、  
またJekyllで利用できるLiquidの拡張タグについては[こちら](https://github.com/mojombo/jekyll/wiki/Liquid-Extensions)。

先ほどのthe_minimumのpost.htmlを見ながらLiquidテンプレートタグで必須になるもタグと、便利なタグについて紹介しよう。

{% highlight html %}
{% raw %}
{{ page.title }} <!-- 記事のYAML front matterでtitleに設定した値を取得 -->
{{ content }} <!-- 記事本文を取得 -->
{% endraw %}
{% endhighlight %}

必須になるのは上記2つというやはりシンプル設計。

{% highlight html %}
{% raw %}
<!-- インクルード -->
{% include header.html %} <!--
includeフォルダ内のheader.htmlファイルをインクルードする -->

<!-- ページネーション -->
{% if page.previous %}
<li class="before left"><a rel="prev" href="{{ page.previous.url }}" class="btn" title="View {{ page.previous.title }}">Before</a></li>
{% endif %}
{% if page.next %}
<li class="next right"><a rel="next" href="{{ page.next.url }}" class="btn" title="View {{ page.next.title }}">Next</a></li>
{% endif %}
{% endraw %}
{% endhighlight %}

インクルードはメンテナンスのために覚えておきたいタグで、  
オフィシャルページにもあまり説明のないページネーションについてはもっともシンプルな例ながら利用できるタグについてはほぼ網羅しているので、カスタマイズする際の参考になれば。

## \_config.ymlの設定 {#config}

ここで利用できる値はほぼ無限にあるもののまずはオフィシャルを参考にしてほしい。
[https://github.com/mojombo/jekyll/wiki/Configuration](https://github.com/mojombo/jekyll/wiki/Configuration)

\_config.ymlは非常に強力でオフィシャルで使えるとしている設定以外にも自由に設定を拡張できる。  
こちらについても、[the_minimumのファイルを参考にしてほしい](https://github.com/studiomohawk/jekyll-theme-the_minimum/blob/master/_config.yml)。

\_config.ymlで設定した値はテンプレートファイル内で、

``site.項目``  

のように呼び出す事ができる。例えば、the_minimumで設定したGoogle Analytics用IDを格納する``ga``を呼び出す場合は、

``site.ga``

というように呼び出す事が可能。  
コンスタントに利用する値、他には例えばサイトのURLやサイト自体のタイトルなどを設定しておくと管理が非常に楽になるはずだ。

## ページの作り方 {#page}

wordpressでは単一ページを作成しaboutページなどを作成してきたという人もいることだろう。  
Jekyllでも単一ページを作成することが可能。

ページの作成方法についてもやはりシンプル設計でトップページにあたる部分``index.html``(トップページも単一ページ)と同じ階層にhtmlファイルを設置すればOK。  
こちらはCSS Radarのファイルを覗いてみてほしい。

- [404ページ](https://github.com/studiomohawk/CSS-Radar/blob/master/404.html)
- [バックナンバページ](https://github.com/studiomohawk/CSS-Radar/blob/master/backnumber.html)
- 少しトリッキーながらフィードファイルも生成できる [atom.xml](https://github.com/studiomohawk/CSS-Radar/blob/master/atom.xml)

## 基本以外のフォルダについて {#otherdir}

Jekyllでは``\_layouts``、``\_posts``、``_site``のみが必須のフォルダと先ほど書いたが、Liquidの説明部分で書いたようにインクルードファイルを格納する、``_include``フォルダや、Jekyllに拡張機能を追加するための、``_plugins``フォルダを作成することができる。アンダーバーがフォルダ名の頭にある場合、Jekyllはそれらをシステムファイルとして扱い、プロセスの際にそれらフォルダも見に行くようになっている。  

アンダーバーがついていないフォルダはJekyllとしては何の処理もしないが、きちんと``\_site``フォルダへ移動してくれる。  
なので、CSSやJavascript、そして画像などを格納するフォルダをそれぞれ、``style``、``script``、``image``というようにしてファイルを格納しておこう。

## ローカル環境でプレビュー {#preview}

このチュートリアル中に新たにデザインを作成しJekyll用にコーディングを完成するのは難しいと思うので、ここから先はすでに作成した私のthe_minimumをダウンロードしてから実践して見てほしい。

Jekyllではコマンドラインを利用してファイルの生成を行う。そう、デザイナには不可解な黒い画面。  
黒い画面とはいえ使うコマンドは片手で数えられる程度なので問題ないし、コピペできるように記述するので是非試してみてほしい。

それでは[the_minimumのダウンロードは終わっただろうか](https://github.com/studiomohawk/jekyll-theme-the_minimum)？  
ターミナルを開いてthe_minimumをダウンロードしたフォルダに移動してほしい。移動は``cd``。

{% highlight sh %}
jekyll --server --auto
{% endhighlight %}

``--server``オプションはプレビュー環境用のサーバを立ち上げ、  
``--auto``オプションはローカルファイルが保存されるたびにファイル生成を行うオプション。

このコマンドをターミナルにて実行したら、

[http://localhost:4000/](http://localhost:4000/)

をブラウザで見るとJekyllをローカル環境で動作させた結果を見る事ができる。  

Jekyllは非常に強力なのにシンプルでインクルードなど便利な機能もついてくるので使い方を工夫すればすばらしいプロトタイプ作成ツールにもなるのではないかと思って、ベースとなるテンプレートを鋭意作成中。
話は少しそれたが思っていた以上に簡単だったのではないだろうか？

## サーバへのアップロード {#upload}

サーバへのアップロードはとても簡単。  
FTPを使って、``\_site``内に生成されたファイル群をアップロードすればOK。  

私は面倒くさがりなのでrakeを使ってrsyncでサーバとローカルファイルの同期をとっている。
``rake rsync:live``
とするだけで指定のローカルフォルダとサーバの同期がとれるようにしてある。

## rakeを使って自動化する {#automation}

コマンドラインに苦手意識を持っている人も多いだろうが、rakeやant、makeのようなビルドツールは様々なタスクを自動化してくれる便利ツール。  
Jekyllはrubyによって書かれているので、rakeを使っていつも行うタスクを幾つか自動化しているので紹介しよう。

- **新しい記事を書く / ``rake post:new["title","category"]``**

Jekyllではファイル名もルールに従って記述する必要があったり、YAML front matterの設定を毎回しなければならなかったりする。

``rake post:new["title","category"]``

とするだけで、``title``からファイル名と記事のタイトルを生成しついでにカテゴリ名を``category``から生成してくれる。  
``title``の方はURLの一部になるだけあって日本語は利用できない。結果、記事のタイトルは生成後に日本語に差し替える必要はある。  

{% highlight ruby %}
namespace :post do
  desc "Given a title as an argument, create a new post file"
  task :new, [:title, :category] do |t, args|
    filename = "#{Time.now.strftime('%Y-%m-%d')}-#{args.title.gsub(/\s/, '-').downcase}.markdown"
    path = File.join("_posts", filename)
    if File.exist? path; raise RuntimeError.new("Won't clobber #{path}"); end
    File.open(path, 'w') do |file|
      file.write <<-EOS
---
layout: post
category: #{args.category}
title: #{args.title}
date: #{Time.now.strftime('%Y-%m-%d %k:%M:%S')}
---
EOS
    end
    puts "Now open #{path} in an editor."
  end
end
{% endhighlight %}

- **Jekyllをローカル環境でプレビュー / ``rake preview``**

``jekyll --auto
--server``と毎回必ずタイプするのは面倒なので。

``rake preview``

{% highlight ruby %}
desc "Launch preview environment"
task :preview do
  system "jekyll --auto --server"
end
{% endhighlight %}

- **rsyncを使ってサーバと同期を取る / ``rake rsync:live``**

Jekyllは静的なファイルを``\_site``ディレクトリに生成してくれる。  
このディレクトリを丸ごとFTPでアップロードすればサイトの更新ができるというシンプルな設計。  
でもどう考えても毎回FTPを使うのは面倒なので、``rsync``を使ってサーバとローカルの同期を取ってしまおう。

``rake
rsync:dryrun``はテスト用で実際には何もサーバには同期されないがどのファイルが同期されるかをチェックするためにある。  
初めてrsyncする場合、正しく設定ができているのかを含めて実際のサーバ側のファイル達には影響なく実行できるのでまずはこちらでテストを。

``rake rsync:live``

テストが終わって無事が確認できたらこのコマンドでサーバへのアップロードが完了する。  
設定の際は利用しているサーバにsshしたりするので、自分が管理者ではない場合はレンタルサーバ側に設定などを確認してほしい。

{% highlight ruby %}
namespace :rsync do
  desc "--dry-run rsync"
    task :dryrun do
      system('rsync _site/ -ave ssh --dry-run --delete ユーザ名@ドメイン名:ディレクトリ/')
    end
  desc "rsync"
    task :live do
      system('rsync _site/ -ave ssh --delete ユーザ名@ドメイン名:ディレクトリ/')
    end
end
{% endhighlight %}
